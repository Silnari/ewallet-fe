{"version":3,"sources":["providers/AuthProvider.jsx","components/login/LoginTitle.jsx","components/login/LoginContainer.jsx","components/login/LoginCard.jsx","axios-instance.js","pages/Login.jsx","pages/Register.jsx","utils/dateUtil.js","components/account/DatePicker.jsx","providers/AccountListProvider.jsx","providers/TransactionListProvider.jsx","components/account/AddTransactionDialog.jsx","components/account/ModifyTransactionDialog.jsx","components/account/ModifyTransferDialog.jsx","utils/transactionUtil.js","components/account/TransactionItem.jsx","components/account/TransactionList.jsx","components/core/Loading.jsx","components/core/LabelledOutline.jsx","components/account/Balance.jsx","components/account/AddTransferDialog.jsx","components/account/NoAccount.jsx","components/account/AccountSelect.jsx","components/account/AccountChart.jsx","pages/Account.jsx","components/accountStats/AccountChart.jsx","components/accountStats/CategoryFilter.jsx","components/accountStats/CategoryList.jsx","pages/AccountStats.jsx","components/core/PageTitle.jsx","components/manageAccount/AddAccountDialog.jsx","components/manageAccount/ModifyAccountDialog.jsx","components/core/ConfirmDialog.jsx","components/manageAccount/AccountItem.jsx","components/manageAccount/AccountList.jsx","pages/ManageAccount.jsx","components/core/layout/LeftDrawer.jsx","components/core/layout/Nav.jsx","components/core/layout/HeadLayout.jsx","App.js","index.js"],"names":["AuthContext","createContext","token","AuthProvider","children","useState","setToken","registerSucess","setRegisterSuccess","history","useHistory","useEffect","tokenFromStorage","localStorage","getItem","Provider","value","logIn","setItem","push","logOut","removeItem","useAuth","useContext","LoginTitle","welcomeText","Box","mb","Typography","display","variant","align","color","LoginContainer","styled","Container","height","alignItems","justifyContent","LoginCard","Card","padding","width","minHeight","axios","create","baseURL","Login","errorMessage","setErrorMessage","doLogin","values","a","login","password","method","url","data","response","status","formik","useFormik","initialValues","onSubmit","CardContent","handleSubmit","Grid","container","direction","spacing","item","TextField","id","label","fullWidth","size","onChange","handleChange","type","Button","onClick","Snackbar","open","autoHideDuration","onClose","Alert","severity","validationSchema","yup","email","required","min","Register","doRegister","error","touched","Boolean","errors","helperText","months","formatDate","date","periodOfTime","m","moment","startOf","format","clone","add","addToDate","toDate","useStyles","makeStyles","dateBox","borderRadius","backgroundColor","datePicker","minWidth","DatePicker","setDate","setPeriodOfTime","isNextAvaible","setIsNextAvaible","classes","Select","event","period","target","Date","className","MenuItem","justify","IconButton","subtract","dateUtil","fontSize","isSame","disabled","AccountListContext","AccountListProvider","accountList","setAccountList","selectedAccount","setSelectedAccount","isAccountLoading","setIsAccountLoading","refreshKey","setRefreshKey","getAccountListAndSetSelected","getAccountList","setSelectedById","find","account","useAccountList","TransactionListContext","TransactionListProvider","transactionList","setTransactionList","isTransactionLoading","setIsTransactionLoading","getTransactionList","undefined","transactionsResponse","incomeResponse","outcomeResponse","concat","map","i","transactionType","category","o","useTransactionList","typeError","positive","note","max","AddTransactionDialog","setOpen","addTransaction","accountId","oldKey","enableReinitialize","setHours","Dialog","DialogTitle","toLowerCase","DialogContent","name","filter","margin","utils","DateFnsUtils","disableToolbar","maxDate","autoOk","KeyboardButtonProps","setFieldValue","DialogActions","ModifyTransactionDialog","transaction","modifyTransaction","deleteTransaction","ModifyTransferDialog","transfer","modifyTransfer","toAccount","fromAccount","toAccountId","fromAccountId","deleteTransfer","xs","InputLabel","htmlFor","style","paddingTop","includes","getIncome","getByTransactionType","getOutcome","transactionTypes","t","getTransactionSum","_","sumBy","getAccountBalance","startBalance","round","getIncomeSum","getOutcomeSum","getSum","sortGrouped","groupBy","grouped","orderBy","filterTransactionsByDate","getPeriod","groupByCategory","groupedArr","Set","forEach","groupByMonth","categoryList","month","index","Math","abs","theme","nested","marginLeft","transactionSubItem","textAlign","icnomeItem","green","white","marginBottom","outcomeItem","red","incomeAvatar","outcomeAvatar","incomeIcon","outcomeIcon","TransactionItem","header","icon","sortBy","isDialogOpen","setIsDialogOpen","isTransferDialogOpen","setIsTransferDialogOpen","selectedTransaction","setSelectedTransaction","getSubField","ListItem","button","ListItemAvatar","Avatar","ListItemText","primary","secondary","length","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","handleOpenDialog","ListItemIcon","TransactionList","getIcon","getHeader","transactionItem","useStyle","spinner","Loading","CircularProgress","root","position","content","props","fontWeight","inputLabel","left","top","transform","LabelledOutline","labelWidth","setLabelWidth","labelRef","useRef","labelNode","ReactDOM","findDOMNode","current","offsetWidth","marginTop","ref","shrink","notched","BalanceBox","border","positiveBalance","negativeBalance","positiveBalanceBox","borderColor","negativeBalanceBox","Balance","filteredTransactionList","balance","AddTransferDialog","addTransfer","tabName","infoBox","NoAccount","mt","to","AccountPicker","maxHeight","maxWidth","marginRight","AccountSelect","COLORS","pink","purple","indigo","blue","teal","lightGreen","amber","deepOrange","renderActiveShape","RADIAN","PI","cx","cy","midAngle","innerRadius","outerRadius","startAngle","endAngle","fill","payload","percent","sin","cos","sx","sy","mx","my","ex","ey","textAnchor","x","y","dy","Sector","d","stroke","r","toFixed","AccountChart","activeIndex","setActiveIndex","onPieEnter","useCallback","console","log","PieChart","Pie","activeShape","dataKey","onMouseEnter","paddingAngle","entry","Cell","incomeButton","outcomeButton","sortButton","black","accountPicker","Account","addTransactionOpen","setAddTransactionOpen","addTransferOpen","setAddTransferOpen","setTransactionType","setSortBy","flexDirection","incomeColor","getIncomeColor","outcomeColor","getOutcomeColor","ResponsiveContainer","LineChart","c","split","categoryStr","categoryArr","Line","strokeWidth","XAxis","YAxis","Tooltip","CategoryFilter","setSearchCategoryText","e","categoryItem","CategoryList","checked","setChecked","searchCategoryText","filteredCategoryList","startsWith","itemSize","itemCount","dense","currentIndex","indexOf","newChecked","splice","Checkbox","edge","GraphBox","AccountStats","self","sort","b","PageTitle","title","AddAcountDialog","addAccount","userId","DialogContentText","autoFocus","ModifyAccountDialog","modifyAccount","ConfirmDialog","handleAction","accountAvatar","accountItem","AccountItem","isModifyDialogOpen","setIsModifyDialogOpen","isDeleteDialogOpen","setIsDeleteDialogOpen","deleteAccount","ListItemSecondaryAction","aria-label","AccountList","ManageAccount","addAccountOpen","setAddAccountOpen","drawer","flexShrink","whiteSpace","drawerOpen","transition","transitions","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","overflowX","breakpoints","up","toolbar","mixins","LeftDrawer","items","currentPage","useLocation","pathname","substring","Drawer","clsx","paper","Divider","Object","entries","key","selected","appBar","zIndex","appBarShift","menuButton","logoutButton","Nav","handleDrawerOpen","handleDrawerClose","AppBar","Toolbar","Fade","noWrap","HeadLayout","navItems","setDrawerOpen","createMuiTheme","palette","main","background","default","flexGrow","pages","accountStats","manageAccount","App","CssBaseline","path","strict","exact","render","document","getElementById"],"mappings":"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","file":"static/js/main.680c1e19.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AuthContext = createContext({ token: null });\r\nconst AuthProvider = ({ children }) => {\r\n  const [token, setToken] = useState(\"\");\r\n  const [registerSucess, setRegisterSuccess] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const tokenFromStorage = localStorage.getItem(\"token\");\r\n    if (tokenFromStorage) setToken(tokenFromStorage);\r\n  }, []);\r\n\r\n  const logIn = (token) => {\r\n    localStorage.setItem(\"token\", token);\r\n    setToken(token);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const logOut = () => {\r\n    localStorage.removeItem(\"token\");\r\n    setToken(null);\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ token, logIn, logOut, registerSucess, setRegisterSuccess }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAuth = () => useContext(AuthContext);\r\n\r\nexport { AuthProvider, useAuth };\r\n","import { Box, Typography } from \"@material-ui/core\";\n\nexport default function LoginTitle({ welcomeText }) {\n  return (\n    <Box mb={4}>\n      <Typography display=\"inline\" variant=\"h4\" align=\"center\">\n        {welcomeText}&nbsp;\n      </Typography>\n      <Typography display=\"inline\" variant=\"h4\" color=\"primary\">\n        eWallet\n      </Typography>\n    </Box>\n  );\n}\n","import { styled } from \"@material-ui/styles\";\nimport { Container } from \"@material-ui/core\";\n\nexport const LoginContainer = styled(Container)({\n  height: \"100vh\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  display: \"flex\",\n});\n","import { styled } from \"@material-ui/styles\";\nimport { Card } from \"@material-ui/core\";\n\nexport const LoginCard = styled(Card)({\n  padding: \"20px 35px 20px 35px\",\n  width: 390,\n  minHeight: 408,\n});\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://ewallet-be.mybluemix.net/\",\n});\n","import { useAuth } from \"../providers/AuthProvider\";\r\nimport {\r\n  Button,\r\n  CardContent,\r\n  Grid,\r\n  TextField,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LoginTitle from \"../components/login/LoginTitle\";\r\nimport { LoginContainer } from \"../components/login/LoginContainer\";\r\nimport { LoginCard } from \"../components/login/LoginCard\";\r\nimport axios from \"../axios-instance\";\r\nimport { useFormik } from \"formik\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Login() {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const { logIn, registerSucess, setRegisterSuccess } = useAuth();\r\n  const history = useHistory();\r\n\r\n  const doLogin = async (values) => {\r\n    const { login, password } = values;\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: \"post\",\r\n        url: \"api/user/authenticate\",\r\n        data: {\r\n          login,\r\n          password,\r\n        },\r\n      });\r\n      if (response.status === 200) {\r\n        logIn(response.data);\r\n      }\r\n    } catch (err) {\r\n      if (err.response.status === 401)\r\n        setErrorMessage(\"Invalid username or password\");\r\n      else setErrorMessage(\"Could not login\");\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      login: \"\",\r\n      password: \"\",\r\n    },\r\n    onSubmit: doLogin,\r\n  });\r\n\r\n  return (\r\n    <LoginContainer>\r\n      <LoginCard>\r\n        <CardContent>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <Grid container align=\"center\" direction=\"column\" spacing={3}>\r\n              <Grid item>\r\n                <LoginTitle welcomeText=\"Log in to\" />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"login\"\r\n                  label=\"Login\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.login}\r\n                  onChange={formik.handleChange}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  label=\"Password\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  onChange={formik.handleChange}\r\n                  value={formik.values.password}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                >\r\n                  Login\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                  onClick={() => history.push(\"/register\")}\r\n                >\r\n                  No account? Register\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </CardContent>\r\n      </LoginCard>\r\n      <Snackbar\r\n        open={!!errorMessage}\r\n        autoHideDuration={7000}\r\n        onClose={() => setErrorMessage(\"\")}\r\n      >\r\n        <Alert severity=\"error\" onClose={() => setErrorMessage(\"\")}>\r\n          {errorMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar\r\n        open={!!registerSucess}\r\n        autoHideDuration={7000}\r\n        onClose={() => setRegisterSuccess(\"\")}\r\n      >\r\n        <Alert severity=\"success\" onClose={() => setRegisterSuccess(\"\")}>\r\n          {registerSucess}\r\n        </Alert>\r\n      </Snackbar>\r\n    </LoginContainer>\r\n  );\r\n}\r\n","import {\r\n  Button,\r\n  CardContent,\r\n  Grid,\r\n  Snackbar,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router\";\r\nimport { LoginContainer } from \"../components/login/LoginContainer\";\r\nimport { LoginCard } from \"../components/login/LoginCard\";\r\nimport LoginTitle from \"../components/login/LoginTitle\";\r\nimport axios from \"../axios-instance\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { useState } from \"react\";\r\nimport { useAuth } from \"../providers/AuthProvider\";\r\n\r\nconst validationSchema = yup.object({\r\n  email: yup\r\n    .string(\"Enter your email\")\r\n    .email(\"Enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  login: yup.string(\"Enter your login\").required(\"Login is required\"),\r\n  password: yup\r\n    .string(\"Enter your password\")\r\n    .min(5, \"Password should be of minimum 5 characters length\")\r\n    .required(\"Password is required\"),\r\n});\r\n\r\nexport default function Register() {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const { setRegisterSuccess } = useAuth();\r\n  const doRegister = async (values) => {\r\n    const { login, email, password } = values;\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: \"post\",\r\n        url: \"api/user/register\",\r\n        data: {\r\n          login,\r\n          email,\r\n          password,\r\n        },\r\n      });\r\n      if (response.status === 200) {\r\n        setRegisterSuccess(\"User registered successfully\");\r\n        history.push(\"login/\");\r\n      }\r\n    } catch (err) {\r\n      if (err.response.status === 400)\r\n        setErrorMessage(\"Login is already taken\");\r\n      else setErrorMessage(\"Could not register user\");\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      login: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: doRegister,\r\n  });\r\n\r\n  const history = useHistory();\r\n  return (\r\n    <LoginContainer>\r\n      <LoginCard>\r\n        <CardContent>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <Grid container align=\"center\" direction=\"column\" spacing={3}>\r\n              <Grid item>\r\n                <LoginTitle welcomeText=\"Register to\" />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"login\"\r\n                  label=\"Login\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.login}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.login && Boolean(formik.errors.login)}\r\n                  helperText={formik.touched.login && formik.errors.login}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"email\"\r\n                  label=\"Email\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.email}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.email && Boolean(formik.errors.email)}\r\n                  helperText={formik.touched.email && formik.errors.email}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  label=\"Password\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.password}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.password && Boolean(formik.errors.password)\r\n                  }\r\n                  helperText={formik.touched.password && formik.errors.password}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                >\r\n                  Register\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                  onClick={() => history.push(\"/login\")}\r\n                >\r\n                  Already have account? Log in\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </CardContent>\r\n      </LoginCard>\r\n      <Snackbar\r\n        open={!!errorMessage}\r\n        autoHideDuration={7000}\r\n        onClose={() => setErrorMessage(\"\")}\r\n      >\r\n        <Alert severity=\"error\" onClose={() => setErrorMessage(\"\")}>\r\n          {errorMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </LoginContainer>\r\n  );\r\n}\r\n","import moment from \"moment\";\n\nexport const months = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nexport const getPeriod = (periodOfTime) => {\n  if (periodOfTime === \"w\") return \"isoWeek\";\n  if (periodOfTime === \"M\") return \"month\";\n  return \"year\";\n};\n\nexport const formatDate = (date, periodOfTime) => {\n  let m = moment(date);\n  if (periodOfTime === \"w\")\n    return (\n      m.startOf(\"isoweek\").format(\"MMMM Do\") +\n      \" - \" +\n      m.clone().startOf(\"isoweek\").add(6, \"d\").format(\"MMMM Do[, ]YYYY\")\n    );\n  if (periodOfTime === \"M\") return m.format(\"MMMM[, ]YYYY\");\n  if (periodOfTime === \"y\") return m.format(\"YYYY\");\n};\n\nexport const format = (date) => moment(date).format(\"dddd, MMMM Do YYYY\");\n\nexport const addToDate = (date, periodOfTime) => {\n  var m = moment(date);\n\n  return periodOfTime === \"d\"\n    ? m.add(7, periodOfTime).toDate()\n    : m.add(1, periodOfTime).toDate();\n};\n\nexport const substractFromDate = (date, periodOfTime) => {\n  var m = moment(date);\n\n  return periodOfTime === \"d\"\n    ? m.subtract(7, periodOfTime).toDate()\n    : m.subtract(1, periodOfTime).toDate();\n};\n\nexport const isNextAvaible = (date, periodOfTime) =>\n  moment(new Date()).isSame(moment(addToDate(date, periodOfTime)), \"day\");\n","import {\n  Box,\n  Grid,\n  IconButton,\n  MenuItem,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { useState } from \"react\";\nimport * as dateUtil from \"../../utils/dateUtil\";\n\nconst useStyles = makeStyles(() => ({\n  dateBox: {\n    borderRadius: 20,\n    display: \"inline-box\",\n    padding: \"10px 20px 10px 20px\",\n    backgroundColor: \"#fff\",\n    width: 410,\n    // eslint-disable-next-line\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  datePicker: {\n    minWidth: 120,\n  },\n}));\n\nexport default function DatePicker({\n  date,\n  setDate,\n  periodOfTime,\n  setPeriodOfTime,\n}) {\n  const [isNextAvaible, setIsNextAvaible] = useState(false);\n  const classes = useStyles();\n\n  const nextDate = () => {\n    setDate(dateUtil.addToDate(date, periodOfTime));\n    if (dateUtil.isNextAvaible(date, periodOfTime)) setIsNextAvaible(false);\n  };\n\n  const prevDate = () => {\n    setDate(dateUtil.substractFromDate(date, periodOfTime));\n    setIsNextAvaible(true);\n  };\n\n  const handlePeriodOfTimeChange = (event) => {\n    const period = event.target.value;\n    setPeriodOfTime(period);\n    setIsNextAvaible(false);\n    setDate(new Date());\n  };\n\n  return (\n    <Grid container direction=\"column\" spacing={1}>\n      <Grid item>\n        {setPeriodOfTime ? (\n          <Select\n            id=\"period-of-time\"\n            value={periodOfTime}\n            onChange={handlePeriodOfTimeChange}\n            className={classes.datePicker}\n          >\n            <MenuItem value={\"w\"}>Week</MenuItem>\n            <MenuItem value={\"M\"}>Month</MenuItem>\n            <MenuItem value={\"y\"}>Year</MenuItem>\n          </Select>\n        ) : (\n          <></>\n        )}\n      </Grid>\n      <Grid item>\n        <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\n          <IconButton color=\"inherit\" onClick={prevDate}>\n            <ChevronLeftIcon fontSize=\"large\" />\n          </IconButton>\n          <Box className={classes.dateBox}>\n            <Typography variant=\"h6\">\n              {dateUtil.formatDate(date, periodOfTime)}\n            </Typography>\n          </Box>\n          <IconButton\n            color=\"inherit\"\n            onClick={nextDate}\n            disabled={!isNextAvaible}\n          >\n            <ChevronRightIcon fontSize=\"large\" />\n          </IconButton>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"../axios-instance\";\nimport { useAuth } from \"./AuthProvider\";\n\nconst AccountListContext = createContext();\nexport default function AccountListProvider({ children }) {\n  const [accountList, setAccountList] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [isAccountLoading, setIsAccountLoading] = useState(false);\n  const [refreshKey, setRefreshKey] = useState(0);\n  const { token } = useAuth();\n\n  const getAccountListAndSetSelected = async () => {\n    setIsAccountLoading(true);\n    const response = await axios({\n      method: \"get\",\n      url: `api/account/${token}`,\n    });\n    if (response.status === 200) {\n      setAccountList(response.data);\n      setSelectedAccount(response.data[0]);\n      setIsAccountLoading(false);\n    }\n  };\n\n  const getAccountList = async () => {\n    setIsAccountLoading(true);\n    const response = await axios({\n      method: \"get\",\n      url: `api/account/${token}`,\n    });\n    if (response.status === 200) {\n      setAccountList(response.data);\n      setIsAccountLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getAccountListAndSetSelected();\n    // eslint-disable-next-line\n  }, []);\n\n  // eslint-disable-next-line\n  useEffect(() => getAccountList(), [refreshKey]);\n\n  const setSelectedById = (id) => {\n    setSelectedAccount(accountList.find((account) => account.id === id));\n  };\n\n  return (\n    <AccountListContext.Provider\n      value={{\n        accountList,\n        selectedAccount,\n        setSelectedById,\n        setRefreshKey,\n        isAccountLoading,\n      }}\n    >\n      {children}\n    </AccountListContext.Provider>\n  );\n}\n\nexport const useAccountList = () => useContext(AccountListContext);\n","import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useAccountList } from \"./AccountListProvider\";\nimport axios from \"../axios-instance\";\nimport { useAuth } from \"./AuthProvider\";\n\nconst TransactionListContext = createContext();\nexport default function TransactionListProvider({ children }) {\n  const [transactionList, setTransactionList] = useState([]);\n  const [isTransactionLoading, setIsTransactionLoading] = useState(false);\n  const [refreshKey, setRefreshKey] = useState(0);\n  const { selectedAccount } = useAccountList();\n  const { token } = useAuth();\n\n  const getTransactionList = async () => {\n    if (selectedAccount === undefined || selectedAccount === null) return;\n    setIsTransactionLoading(true);\n    const transactionsResponse = await axios({\n      method: \"get\",\n      url: `api/transaction/${token}/${selectedAccount?.id}`,\n    });\n\n    if (selectedAccount.id === 0 && transactionsResponse.status === 200) {\n      setTransactionList(transactionsResponse.data);\n      setIsTransactionLoading(false);\n      return;\n    }\n\n    const incomeResponse = await axios({\n      method: \"get\",\n      url: `api/transfer/to/${selectedAccount.id}`,\n    });\n\n    const outcomeResponse = await axios({\n      method: \"get\",\n      url: `api/transfer/from/${selectedAccount.id}`,\n    });\n\n    if (\n      transactionsResponse.status === 200 &&\n      incomeResponse.status === 200 &&\n      outcomeResponse.status === 200\n    ) {\n      setTransactionList(\n        transactionsResponse.data.concat(\n          incomeResponse.data.map((i) => {\n            i.transactionType = \"TRANSFER-INCOME\";\n            i.category = \"Transfer\";\n            return i;\n          }),\n          outcomeResponse.data.map((o) => {\n            o.transactionType = \"TRANSFER-OUTCOME\";\n            o.category = \"Transfer\";\n            return o;\n          })\n        )\n      );\n      setIsTransactionLoading(false);\n    }\n  };\n\n  useEffect(\n    () => getTransactionList(),\n    // eslint-disable-next-line\n    [selectedAccount, refreshKey]\n  );\n\n  return (\n    <TransactionListContext.Provider\n      value={{\n        transactionList,\n        isTransactionLoading,\n        setRefreshKey,\n      }}\n    >\n      {children}\n    </TransactionListContext.Provider>\n  );\n}\n\nexport const useTransactionList = () => useContext(TransactionListContext);\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  category: yup.string(\"Enter category\").required(\"Category is required\"),\n  date: yup\n    .date(\"Enter date\")\n    .typeError(\"Enter date with valid format (dd/mm/yyyy)\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function AddTransactionDialog({\n  open,\n  setOpen,\n  transactionType,\n}) {\n  const { setRefreshKey } = useTransactionList();\n  const { accountList, selectedAccount } = useAccountList();\n\n  const addTransaction = async (values) => {\n    const { account, value, note, category, date } = values;\n    const response = await axios({\n      method: \"post\",\n      url: \"api/transaction\",\n      data: {\n        accountId: account,\n        value,\n        note,\n        category,\n        date,\n        transactionType,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      account:\n        selectedAccount?.id !== 0 ? selectedAccount.id : accountList[0].id,\n      value: 0,\n      note: \"\",\n      category: \"\",\n      date: new Date(new Date().setHours(0, 0, 0, 0)),\n    },\n    validationSchema: validationSchema,\n    onSubmit: addTransaction,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Add new {transactionType.toLowerCase()}</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <Select\n            id=\"account\"\n            name=\"account\"\n            value={formik.values.account}\n            fullWidth\n            onChange={formik.handleChange}\n            error={formik.touched.account && Boolean(formik.errors.account)}\n          >\n            {accountList\n              .filter((account) => account.id !== 0)\n              .map((account) => (\n                <MenuItem key={account.id} value={account.id}>\n                  {account.name}\n                </MenuItem>\n              ))}\n          </Select>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"category\"\n            label=\"Category\"\n            fullWidth\n            value={formik.values.category}\n            onChange={formik.handleChange}\n            error={formik.touched.category && Boolean(formik.errors.category)}\n            helperText={formik.touched.category && formik.errors.category}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  category: yup.string(\"Enter category\").required(\"Category is required\"),\n  date: yup\n    .date(\"Enter date\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function ModifyTransactionDialog({\n  open,\n  setOpen,\n  transaction,\n}) {\n  const { setRefreshKey } = useTransactionList();\n\n  const modifyTransaction = async (values) => {\n    const { value, note, category, date } = values;\n\n    const response = await axios({\n      method: \"put\",\n      url: `/api/transaction/${transaction.id}`,\n      data: {\n        value,\n        note,\n        category,\n        date,\n      },\n    });\n\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const deleteTransaction = async () => {\n    const response = await axios({\n      method: \"delete\",\n      url: `/api/transaction/${transaction.id}`,\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: transaction ? transaction : {},\n    validationSchema: validationSchema,\n    onSubmit: modifyTransaction,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Modify transaction</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"category\"\n            label=\"Category\"\n            fullWidth\n            value={formik.values.category}\n            onChange={formik.handleChange}\n            error={formik.touched.category && Boolean(formik.errors.category)}\n            helperText={formik.touched.category && formik.errors.category}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={deleteTransaction}\n            >\n              Delete\n            </Button>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  date: yup\n    .date(\"Enter date\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function ModifyTransferDialog({ open, setOpen, transfer }) {\n  const { setRefreshKey } = useTransactionList();\n  const { accountList } = useAccountList();\n\n  const modifyTransfer = async (values) => {\n    const { toAccount, fromAccount, value, note, date } = values;\n    const response = await axios({\n      method: \"put\",\n      url: `api/transfer/${transfer.id}`,\n      data: {\n        toAccountId: toAccount,\n        fromAccountId: fromAccount,\n        value,\n        note,\n        date,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const deleteTransfer = async () => {\n    const response = await axios({\n      method: \"delete\",\n      url: `/api/transfer/${transfer.id}`,\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: transfer\n      ? {\n          fromAccount: transfer.fromAccountId,\n          toAccount: transfer.toAccountId,\n          value: transfer.value,\n          note: transfer.note,\n          date: transfer.date,\n        }\n      : {},\n    validationSchema: validationSchema,\n    onSubmit: modifyTransfer,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Modify transfer</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <Grid container align=\"center\" direction=\"row\">\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"fromAccount\">\n                From:\n              </InputLabel>\n              <Select\n                id=\"fromAccount\"\n                name=\"fromAccount\"\n                fullWidth\n                value={formik.values.fromAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.fromAccount &&\n                  Boolean(formik.errors.fromAccount)\n                }\n              >\n                {accountList\n                  .filter((account) => account.id !== 0)\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n            <Grid item xs={2} style={{ paddingTop: 20 }}>\n              <ArrowRightAltIcon />\n            </Grid>\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"toAccount\">\n                To:\n              </InputLabel>\n              <Select\n                fullWidth\n                id=\"toAccount\"\n                name=\"toAccount\"\n                value={formik.values.toAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.toAccount && Boolean(formik.errors.toAccount)\n                }\n              >\n                {accountList\n                  .filter(\n                    (account) =>\n                      ![formik.values.fromAccount, 0].includes(account.id)\n                  )\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n          </Grid>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={deleteTransfer}\n            >\n              Delete\n            </Button>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport { getPeriod, months } from \"./dateUtil\";\n\nexport const getIncome = (transactionList) =>\n  getByTransactionType(transactionList, [\"INCOME\", \"TRANSFER-INCOME\"]);\n\nexport const getOutcome = (transactionList) =>\n  getByTransactionType(transactionList, [\"OUTCOME\", \"TRANSFER-OUTCOME\"]);\n\nconst getByTransactionType = (transactionList, transactionTypes) =>\n  transactionList.filter((t) => transactionTypes.includes(t.transactionType));\n\nconst getTransactionSum = (transactionList) =>\n  _.sumBy(getIncome(transactionList), \"value\") -\n  _.sumBy(getOutcome(transactionList), \"value\");\n\nexport const getAccountBalance = (startBalance, transactionList) =>\n  _.round(startBalance + getTransactionSum(transactionList), 2);\n\nexport const getIncomeSum = (transactionList) =>\n  _.round(getTransactionSum(getIncome(transactionList)), 2);\n\nexport const getOutcomeSum = (transactionList) =>\n  -_.round(getTransactionSum(getOutcome(transactionList)), 2);\n\nexport const getSum = (transactionList) =>\n  _.round(getTransactionSum(transactionList), 2);\n\nexport const sortGrouped = (transactionList, groupBy) => {\n  const grouped = _.orderBy(\n    _.groupBy(transactionList, groupBy),\n    [(t) => _.sumBy(t, \"value\")],\n    \"desc\"\n  );\n  return _.map(grouped, (t) => _.orderBy(t, \"value\", \"desc\"));\n};\n\nexport const filterTransactionsByDate = (transactionList, date, periodOfTime) =>\n  transactionList.filter((transaction) =>\n    moment(transaction.date).isSame(moment(date), getPeriod(periodOfTime))\n  );\n\nexport const groupByCategory = (transactionList) => {\n  const groupedArr = [];\n  const categoryList = [...new Set(transactionList.map((t) => t.category))];\n  categoryList.forEach((category) => {\n    groupedArr.push({\n      name: category,\n      value: getOutcomeSum(\n        transactionList.filter((t) => t.category === category)\n      ),\n    });\n  });\n\n  return groupedArr;\n};\n\nexport const groupByMonth = (transactionList, categoryList) => {\n  const grouped = _.groupBy(\n    transactionList.filter(\n      (t) =>\n        categoryList.includes(t.category) ||\n        (categoryList.includes(\"Income total\") &&\n          t.transactionType === \"INCOME\") ||\n        (categoryList.includes(\"Outcome total\") &&\n          t.transactionType === \"OUTCOME\")\n    ),\n    (transaction) => moment(transaction.date).startOf(\"month\").format(\"MMM\")\n  );\n\n  const groupedArr = [];\n  months.forEach((month, index) => {\n    groupedArr.push({ month });\n    categoryList.forEach((category) => {\n      if (grouped[month]) {\n        if (category === \"Income total\")\n          groupedArr[index][category] = getIncomeSum(grouped[month]);\n        else if (category === \"Outcome total\")\n          groupedArr[index][category] = getOutcomeSum(grouped[month]);\n        else {\n          groupedArr[index][category] = Math.abs(\n            getSum(grouped[month].filter((t) => t.category === category))\n          );\n        }\n      }\n    });\n  });\n\n  return groupedArr;\n};\n","import {\n  Avatar,\n  Collapse,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport ModifyTransactionDialog from \"./ModifyTransactionDialog\";\nimport ModifyTransferDialog from \"./ModifyTransferDialog\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\nimport { getSum } from \"../../utils/transactionUtil\";\nimport { format } from \"../../utils/dateUtil\";\n\nconst useStyles = makeStyles((theme) => ({\n  nested: {\n    marginLeft: theme.spacing(4),\n    borderRadius: 50,\n    width: 450,\n  },\n  transactionSubItem: {\n    textAlign: \"right\",\n  },\n  icnomeItem: {\n    color: theme.green,\n    backgroundColor: theme.white,\n    borderRadius: 20,\n    marginBottom: 5,\n  },\n  outcomeItem: {\n    color: theme.red,\n    backgroundColor: theme.white,\n    borderRadius: 20,\n    marginBottom: 5,\n  },\n  incomeAvatar: {\n    backgroundColor: theme.green,\n  },\n  outcomeAvatar: {\n    backgroundColor: theme.red,\n  },\n  incomeIcon: {\n    color: theme.green,\n  },\n  outcomeIcon: {\n    color: theme.red,\n  },\n}));\n\nexport default function TransactionItem({\n  header,\n  icon,\n  transactionList,\n  sortBy,\n  type,\n}) {\n  const [open, setOpen] = useState(false);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isTransferDialogOpen, setIsTransferDialogOpen] = useState(false);\n  const [selectedTransaction, setSelectedTransaction] = useState(null);\n  const { accountList } = useAccountList();\n  const classes = useStyles();\n\n  const getSubField = (transaction) => {\n    if (sortBy === \"category\") return format(transaction.date);\n    return transaction.category;\n  };\n\n  const handleOpenDialog = (transaction) => {\n    setSelectedTransaction(transaction);\n    if ([\"INCOME\", \"OUTCOME\"].includes(transaction.transactionType))\n      setIsDialogOpen(true);\n    else setIsTransferDialogOpen(true);\n  };\n\n  return (\n    <>\n      <ListItem\n        key={header + type}\n        className={type === \"INCOME\" ? classes.icnomeItem : classes.outcomeItem}\n        button\n        onClick={() => setOpen(!open)}\n      >\n        <ListItemAvatar>\n          <Avatar\n            className={\n              type === \"INCOME\" ? classes.incomeAvatar : classes.outcomeAvatar\n            }\n            variant=\"rounded\"\n          >\n            {icon}\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText\n          primary={header}\n          secondary={`Transactions: ${transactionList?.length}`}\n        />\n        <ListItemText\n          className={classes.transactionSubItem}\n          primary={`${getSum(transactionList)} zł`}\n        />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {transactionList.map((transaction) => (\n            <ListItem\n              key={transaction.id}\n              className={classes.nested}\n              button\n              onClick={() => {\n                handleOpenDialog(transaction);\n              }}\n            >\n              <ListItemIcon>\n                <FiberManualRecordIcon\n                  fontSize=\"small\"\n                  className={\n                    type === \"INCOME\" ? classes.incomeIcon : classes.outcomeIcon\n                  }\n                />\n              </ListItemIcon>\n              <ListItemText\n                primary={`${transaction.value} zł`}\n                secondary={transaction.note}\n              />\n              <ListItemText\n                className={classes.transactionSubItem}\n                secondary={getSubField(transaction)}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </Collapse>\n      <ModifyTransactionDialog\n        open={isDialogOpen}\n        setOpen={setIsDialogOpen}\n        transaction={selectedTransaction}\n      />\n      <ModifyTransferDialog\n        open={isTransferDialogOpen}\n        setOpen={setIsTransferDialogOpen}\n        transfer={selectedTransaction}\n        accountList={accountList}\n      />\n    </>\n  );\n}\n","import { List } from \"@material-ui/core\";\nimport TransactionItem from \"./TransactionItem\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport EventIcon from \"@material-ui/icons/Event\";\nimport { format } from \"../../utils/dateUtil\";\nimport {\n  getIncome,\n  getOutcome,\n  filterTransactionsByDate,\n  sortGrouped,\n} from \"../../utils/transactionUtil\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\n\nexport default function TransactionList({ sortBy, date, periodOfTime }) {\n  const { transactionList } = useTransactionList();\n\n  const getIcon = () =>\n    sortBy === \"category\" ? <FolderOpenIcon /> : <EventIcon />;\n\n  const getHeader = (transactionItem) =>\n    sortBy === \"date\"\n      ? format(transactionItem[0].date)\n      : transactionItem[0].category;\n\n  return (\n    <List>\n      {sortGrouped(\n        filterTransactionsByDate(\n          getIncome(transactionList),\n          date,\n          periodOfTime\n        ),\n        sortBy\n      ).map((transactionItem) => (\n        <TransactionItem\n          key={transactionItem[0][sortBy] + \"INCOME\"}\n          type=\"INCOME\"\n          icon={getIcon()}\n          transactionList={transactionItem}\n          sortBy={sortBy}\n          header={getHeader(transactionItem)}\n        />\n      ))}\n      {sortGrouped(\n        filterTransactionsByDate(\n          getOutcome(transactionList),\n          date,\n          periodOfTime\n        ),\n        sortBy\n      ).map((transactionItem) => (\n        <TransactionItem\n          key={transactionItem[0][sortBy] + \"OUTCOME\"}\n          type=\"OUTCOME\"\n          icon={getIcon()}\n          transactionList={transactionItem}\n          sortBy={sortBy}\n          header={getHeader(transactionItem)}\n        />\n      ))}\n    </List>\n  );\n}\n","import { Box, CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyle = makeStyles((theme) => ({\n  spinner: {\n    height: \"40vh\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    display: \"flex\",\n  },\n}));\n\nexport default function Loading() {\n  const classes = useStyle();\n\n  return (\n    <Box className={classes.spinner}>\n      <CircularProgress />\n    </Box>\n  );\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport NotchedOutline from \"@material-ui/core/OutlinedInput/NotchedOutline\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  content: (props) => ({\n    padding: \"15px 14px\",\n    borderRadius: 10,\n    width: 195,\n    height: 50,\n    fontWeight: \"bold\",\n    backgroundColor: theme.white,\n    color: props.color,\n  }),\n  inputLabel: {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    transform: \"translate(0, 24px) scale(1)\",\n  },\n}));\n\nexport default function LabelledOutline({ id, label, children, color }) {\n  const [labelWidth, setLabelWidth] = useState(0);\n  const labelRef = useRef(null);\n  const classes = useStyles({ color: color });\n\n  useEffect(() => {\n    const labelNode = ReactDOM.findDOMNode(labelRef.current);\n    setLabelWidth(labelNode != null ? labelNode.offsetWidth : 0);\n  }, [label]);\n\n  return (\n    <div style={{ position: \"relative\", marginTop: \"8px\" }}>\n      <InputLabel\n        ref={labelRef}\n        htmlFor={id}\n        variant=\"outlined\"\n        className={classes.inputLabel}\n        shrink\n      >\n        {label}\n      </InputLabel>\n      <div className={classes.root}>\n        <div id={id} className={classes.content}>\n          {children}\n          <NotchedOutline notched labelWidth={labelWidth} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { Box, Grid, makeStyles, styled } from \"@material-ui/core\";\nimport * as balance from \"../../utils/transactionUtil\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\nimport LabelledOutline from \"../core/LabelledOutline\";\n\nconst BalanceBox = styled(Box)({\n  border: \"2px solid\",\n  borderRadius: 10,\n  padding: 10,\n  width: 195,\n  fontWeight: \"bold\",\n  backgroundColor: \"#fff\",\n});\n\nconst useStyles = makeStyles((theme) => ({\n  positiveBalance: {\n    color: theme.green,\n  },\n  negativeBalance: {\n    color: theme.red,\n  },\n  positiveBalanceBox: {\n    borderColor: theme.green,\n  },\n  negativeBalanceBox: {\n    borderColor: theme.red,\n  },\n}));\n\nexport default function Balance({ date, periodOfTime }) {\n  const classes = useStyles();\n  const { transactionList } = useTransactionList();\n  const { selectedAccount } = useAccountList();\n\n  const filteredTransactionList = balance.filterTransactionsByDate(\n    transactionList,\n    date,\n    periodOfTime\n  );\n\n  return (\n    <Box>\n      <Grid container alignItems=\"center\" direction=\"column\" spacing={1}>\n        <Grid item>\n          <Grid container spacing={2}>\n            <Grid item>\n              <BalanceBox\n                className={`${classes.positiveBalanceBox} ${classes.positiveBalance}`}\n              >\n                {balance.getIncomeSum(filteredTransactionList)} zł\n              </BalanceBox>\n            </Grid>\n            <Grid item>\n              <BalanceBox\n                className={`${classes.negativeBalanceBox} ${classes.negativeBalance}`}\n              >\n                {balance.getOutcomeSum(filteredTransactionList)} zł\n              </BalanceBox>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <Grid container spacing={2}>\n            <Grid item>\n              <LabelledOutline\n                id=\"monthly\"\n                label=\"Monthly\"\n                color={\n                  balance.getSum(filteredTransactionList) > 0 ? \"green\" : \"red\"\n                }\n              >\n                {balance.getSum(filteredTransactionList)} zł\n              </LabelledOutline>\n            </Grid>\n            <Grid item>\n              <LabelledOutline\n                id=\"account\"\n                label=\"Account\"\n                color={\n                  balance.getAccountBalance(\n                    selectedAccount.startBalance,\n                    transactionList\n                  ) > 0\n                    ? \"green\"\n                    : \"red\"\n                }\n              >\n                {balance.getAccountBalance(\n                  selectedAccount.startBalance,\n                  transactionList\n                )}{\" \"}\n                zł\n              </LabelledOutline>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  date: yup\n    .date(\"Enter date\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function AddTransferDialog({ open, setOpen }) {\n  const { setRefreshKey } = useTransactionList();\n  const { accountList, selectedAccount } = useAccountList();\n\n  const addTransfer = async (values) => {\n    const { toAccount, fromAccount, value, note, date } = values;\n    const response = await axios({\n      method: \"post\",\n      url: \"api/transfer\",\n      data: {\n        toAccountId: toAccount,\n        fromAccountId: fromAccount,\n        value,\n        note,\n        date,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      fromAccount:\n        selectedAccount.id !== 0 ? selectedAccount.id : accountList[0].id,\n      toAccount: accountList[1]?.id,\n      value: 0,\n      note: \"\",\n      date: new Date(new Date().setHours(0, 0, 0, 0)),\n    },\n    validationSchema: validationSchema,\n    onSubmit: addTransfer,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Add new transfer</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <Grid container align=\"center\" direction=\"row\">\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"fromAccount\">\n                From:\n              </InputLabel>\n              <Select\n                id=\"fromAccount\"\n                name=\"fromAccount\"\n                fullWidth\n                value={formik.values.fromAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.fromAccount &&\n                  Boolean(formik.errors.fromAccount)\n                }\n              >\n                {accountList\n                  .filter((account) => account.id !== 0)\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n            <Grid item xs={2} style={{ paddingTop: 20 }}>\n              <ArrowRightAltIcon />\n            </Grid>\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"toAccount\">\n                To:\n              </InputLabel>\n              <Select\n                fullWidth\n                id=\"toAccount\"\n                name=\"toAccount\"\n                value={formik.values.toAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.toAccount && Boolean(formik.errors.toAccount)\n                }\n              >\n                {accountList\n                  .filter(\n                    (account) =>\n                      ![formik.values.fromAccount, 0].includes(account.id)\n                  )\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n          </Grid>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  tabName: {\n    color: theme.green,\n  },\n  infoBox: {\n    border: \"2px solid\",\n    borderRadius: 10,\n    padding: 15,\n    borderColor: theme.green,\n    backgroundColor: theme.white,\n  },\n}));\n\nexport default function NoAccount() {\n  const classes = useStyles();\n\n  return (\n    <Box mt={2} className={classes.infoBox}>\n      <InfoIcon fontSize=\"large\" className={classes.tabName} />\n      <Typography variant=\"h6\">\n        Please add your first account in{\" \"}\n        <Link to=\"/manageAccount\" className={classes.tabName}>\n          Manage accounts\n        </Link>{\" \"}\n        tab\n      </Typography>\n    </Box>\n  );\n}\n","import { MenuItem, Select } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/styles\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst AccountPicker = styled(Select)({\n  maxHeight: 50,\n  minWidth: 162,\n  maxWidth: 162,\n  marginLeft: -20,\n  marginRight: 20,\n  backgroundColor: \"#fff\",\n});\n\nexport default function AccountSelect() {\n  const { accountList, selectedAccount, setSelectedById } = useAccountList();\n\n  const handleSelectedAccountChange = (event) => {\n    setSelectedById(event.target.value);\n  };\n\n  return (\n    <AccountPicker\n      variant=\"outlined\"\n      value={selectedAccount.id}\n      onChange={handleSelectedAccountChange}\n    >\n      {accountList.map((account) => (\n        <MenuItem key={account.id} value={account.id}>\n          {account.name}\n        </MenuItem>\n      ))}\n    </AccountPicker>\n  );\n}\n","import {\n  amber,\n  blue,\n  deepOrange,\n  green,\n  indigo,\n  lightGreen,\n  pink,\n  purple,\n  red,\n  teal,\n} from \"@material-ui/core/colors\";\nimport { useCallback, useState } from \"react\";\nimport { Cell, Pie, PieChart, Sector } from \"recharts\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\nimport {\n  filterTransactionsByDate,\n  groupByCategory,\n} from \"../../utils/transactionUtil\";\n\nconst COLORS = [\n  red[500],\n  pink[500],\n  purple[500],\n  indigo[500],\n  blue[500],\n  teal[500],\n  lightGreen[500],\n  green[500],\n  amber[500],\n  deepOrange[500],\n];\n\nconst renderActiveShape = (props) => {\n  const RADIAN = Math.PI / 180;\n  const {\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    startAngle,\n    endAngle,\n    fill,\n    payload,\n    percent,\n    value,\n  } = props;\n  const sin = Math.sin(-RADIAN * midAngle);\n  const cos = Math.cos(-RADIAN * midAngle);\n  const sx = cx + (outerRadius + 10) * cos;\n  const sy = cy + (outerRadius + 10) * sin;\n  const mx = cx + (outerRadius + 30) * cos;\n  const my = cy + (outerRadius + 30) * sin;\n  const ex = mx + (cos >= 0 ? 1 : -1) * 22;\n  const ey = my;\n  const textAnchor = cos >= 0 ? \"start\" : \"end\";\n\n  return (\n    <g>\n      <text\n        x={cx}\n        y={cy}\n        dy={8}\n        textAnchor=\"middle\"\n        fill={fill}\n        fontWeight=\"bold\"\n      >\n        {payload.name}\n      </text>\n      <Sector\n        cx={cx}\n        cy={cy}\n        innerRadius={innerRadius}\n        outerRadius={outerRadius}\n        startAngle={startAngle}\n        endAngle={endAngle}\n        fill={fill}\n      />\n      <Sector\n        cx={cx}\n        cy={cy}\n        startAngle={startAngle}\n        endAngle={endAngle}\n        innerRadius={outerRadius + 6}\n        outerRadius={outerRadius + 10}\n        fill={fill}\n      />\n      <path\n        d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`}\n        stroke={fill}\n        fill=\"none\"\n      />\n      <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\" />\n      <text\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\n        y={ey}\n        textAnchor={textAnchor}\n        fill=\"#333\"\n      >{`${value}zł`}</text>\n      <text\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\n        y={ey}\n        dy={18}\n        textAnchor={textAnchor}\n        fill=\"#999\"\n      >\n        {`(${(percent * 100).toFixed(2)}%)`}\n      </text>\n    </g>\n  );\n};\n\nexport default function AccountChart({ date, periodOfTime }) {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const onPieEnter = useCallback(\n    (_, index) => {\n      setActiveIndex(index);\n    },\n    [setActiveIndex]\n  );\n\n  const { transactionList } = useTransactionList();\n  const data = groupByCategory(\n    filterTransactionsByDate(transactionList, date, periodOfTime)\n  );\n\n  console.log(\n    groupByCategory(\n      filterTransactionsByDate(transactionList, date, periodOfTime)\n    )\n  );\n  return (\n    <PieChart width={500} height={350}>\n      <Pie\n        data={data}\n        activeIndex={activeIndex}\n        activeShape={renderActiveShape}\n        dataKey=\"value\"\n        innerRadius={75}\n        outerRadius={125}\n        onMouseEnter={onPieEnter}\n        paddingAngle={1}\n      >\n        {data.map((entry, index) => (\n          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n        ))}\n      </Pie>\n    </PieChart>\n  );\n}\n","import {\n  Box,\n  Container,\n  Grid,\n  IconButton,\n  Typography,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport DatePicker from \"../components/account/DatePicker\";\nimport RemoveCircleOutlineOutlinedIcon from \"@material-ui/icons/RemoveCircleOutlineOutlined\";\nimport LoopRoundedIcon from \"@material-ui/icons/LoopRounded\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport EventIcon from \"@material-ui/icons/Event\";\nimport AddCircleOutlineRoundedIcon from \"@material-ui/icons/AddCircleOutlineRounded\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport AddTransactionDialog from \"../components/account/AddTransactionDialog\";\nimport { useAccountList } from \"../providers/AccountListProvider\";\nimport TransactionList from \"../components/account/TransactionList\";\nimport { useTransactionList } from \"../providers/TransactionListProvider\";\nimport Loading from \"../components/core/Loading\";\nimport Balance from \"../components/account/Balance\";\nimport AddTransferDialog from \"../components/account/AddTransferDialog\";\nimport NoAccount from \"../components/account/NoAccount\";\nimport AccountSelect from \"../components/account/AccountSelect\";\nimport AccountChart from \"../components/account/AccountChart\";\n\nconst useStyles = makeStyles((theme) => ({\n  incomeButton: {\n    color: theme.green,\n  },\n  outcomeButton: {\n    color: theme.red,\n  },\n  sortButton: {\n    color: theme.black,\n    backgroundColor: theme.white,\n  },\n  accountPicker: {\n    maxHeight: 50,\n    minWidth: 162,\n    maxWidth: 162,\n    marginLeft: -20,\n    marginRight: 20,\n    backgroundColor: theme.white,\n  },\n}));\n\nexport default function Account() {\n  const [date, setDate] = useState(new Date());\n  const [periodOfTime, setPeriodOfTime] = useState(\"M\");\n  const [addTransactionOpen, setAddTransactionOpen] = useState(false);\n  const [addTransferOpen, setAddTransferOpen] = useState(false);\n  const [transactionType, setTransactionType] = useState(\"INCOME\");\n  const { accountList, selectedAccount } = useAccountList();\n  const { isTransactionLoading } = useTransactionList();\n  const [sortBy, setSortBy] = useState(\"category\");\n  const classes = useStyles();\n\n  const addTransaction = (transactionType) => {\n    setTransactionType(transactionType);\n    setAddTransactionOpen(true);\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      {!selectedAccount ? (\n        <Loading />\n      ) : (\n        <Box display=\"flex\">\n          <AccountSelect />\n          <Box>\n            <Grid container align=\"center\" direction=\"column\" spacing={2}>\n              <Grid item>\n                <DatePicker\n                  date={date}\n                  setDate={setDate}\n                  periodOfTime={periodOfTime}\n                  setPeriodOfTime={setPeriodOfTime}\n                />\n              </Grid>\n              {isTransactionLoading ? (\n                <Loading />\n              ) : accountList.length === 1 ? (\n                <NoAccount />\n              ) : (\n                <>\n                  <Grid item>\n                    <Balance date={date} periodOfTime={periodOfTime} />\n                  </Grid>\n                  <Grid item>\n                    <AccountChart date={date} periodOfTime={periodOfTime} />\n                  </Grid>\n                  <Grid item>\n                    <Box mt={1}>\n                      <IconButton\n                        className={classes.incomeButton}\n                        onClick={() => addTransaction(\"INCOME\")}\n                      >\n                        <AddCircleOutlineRoundedIcon fontSize=\"large\" />\n                      </IconButton>\n                      <IconButton\n                        color=\"inherit\"\n                        onClick={() => setAddTransferOpen(true)}\n                      >\n                        <LoopRoundedIcon fontSize=\"large\" />\n                      </IconButton>\n                      <IconButton\n                        className={classes.outcomeButton}\n                        onClick={() => addTransaction(\"OUTCOME\")}\n                      >\n                        <RemoveCircleOutlineOutlinedIcon fontSize=\"large\" />\n                      </IconButton>\n                    </Box>\n                  </Grid>\n                  <Grid item>\n                    <Box\n                      display=\"flex\"\n                      flexDirection=\"row\"\n                      justifyContent=\"flex-end\"\n                      alignItems=\"center\"\n                    >\n                      <Typography>Group by {sortBy}&nbsp;</Typography>\n                      <IconButton\n                        className={classes.sortButton}\n                        size=\"small\"\n                        onClick={() =>\n                          setSortBy(sortBy === \"date\" ? \"category\" : \"date\")\n                        }\n                      >\n                        {sortBy === \"date\" ? <FolderOpenIcon /> : <EventIcon />}\n                      </IconButton>\n                    </Box>\n                    <TransactionList\n                      sortBy={sortBy}\n                      date={date}\n                      periodOfTime={periodOfTime}\n                    />\n                  </Grid>{\" \"}\n                </>\n              )}\n            </Grid>\n          </Box>\n          <AddTransactionDialog\n            open={addTransactionOpen}\n            setOpen={setAddTransactionOpen}\n            transactionType={transactionType}\n          />\n          <AddTransferDialog\n            open={addTransferOpen}\n            setOpen={setAddTransferOpen}\n          />\n        </Box>\n      )}\n    </Container>\n  );\n}\n","import { green, red } from \"@material-ui/core/colors\";\nimport {\n  LineChart,\n  Line,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\nimport {\n  groupByMonth,\n  filterTransactionsByDate,\n} from \"../../utils/transactionUtil\";\n\nexport default function AccountChart({ date, categoryList }) {\n  const { transactionList } = useTransactionList();\n\n  let incomeColor = 700;\n  const getIncomeColor = () => {\n    const color = green[incomeColor];\n    incomeColor += 100;\n    if (incomeColor === 800) incomeColor = 300;\n    return color;\n  };\n\n  let outcomeColor = 700;\n  const getOutcomeColor = () => {\n    const color = red[outcomeColor];\n    outcomeColor += 100;\n    if (outcomeColor === 800) outcomeColor = 300;\n    return color;\n  };\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart\n        data={groupByMonth(\n          filterTransactionsByDate(transactionList, date, \"y\"),\n          categoryList.map((c) => c.split(\"^\")[0])\n        )}\n      >\n        {categoryList.map((categoryStr) => {\n          const categoryArr = categoryStr.split(\"^\");\n          return (\n            <Line\n              key={categoryStr}\n              name={categoryArr[0]}\n              type=\"monotone\"\n              strokeWidth={6}\n              dataKey={categoryArr[0]}\n              stroke={\n                categoryArr[1] === \"INCOME\"\n                  ? getIncomeColor()\n                  : getOutcomeColor()\n              }\n            />\n          );\n        })}\n        <XAxis dataKey=\"month\" />\n        <YAxis />\n        <Tooltip />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","import { Container, TextField } from \"@material-ui/core\";\n\nexport default function CategoryFilter({ setSearchCategoryText }) {\n  const filterCategory = (e) => {\n    setSearchCategoryText(e.target.value);\n  };\n\n  return (\n    <Container maxWidth=\"xs\">\n      <TextField\n        fullWidth\n        label=\"Search category\"\n        margin=\"normal\"\n        variant=\"outlined\"\n        onChange={filterCategory}\n      />\n    </Container>\n  );\n}\n","import {\n  Checkbox,\n  Container,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\nimport TrendingDownIcon from \"@material-ui/icons/TrendingDown\";\nimport { FixedSizeList } from \"react-window\";\n\nconst useStyles = makeStyles((theme) => ({\n  categoryItem: {\n    backgroundColor: theme.white,\n    borderRadius: 10,\n  },\n  incomeIcon: {\n    color: theme.green,\n  },\n  outcomeIcon: {\n    color: theme.red,\n  },\n  icon: {\n    marginLeft: theme.spacing(3),\n  },\n}));\n\nexport default function CategoryList({\n  checked,\n  setChecked,\n  categoryList,\n  searchCategoryText,\n}) {\n  const classes = useStyles();\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const filteredCategoryList = categoryList.filter((category) =>\n    category.toLowerCase().startsWith(searchCategoryText.toLowerCase())\n  );\n\n  const renderRow = ({ index, style }) => {\n    const categoryArr = filteredCategoryList[index].split(\"^\");\n\n    return (\n      <ListItem\n        style={style}\n        key={filteredCategoryList[index]}\n        className={classes.categoryItem}\n        dense\n        button\n        onClick={handleToggle(filteredCategoryList[index])}\n      >\n        <ListItemIcon>\n          <Checkbox\n            edge=\"start\"\n            checked={checked.indexOf(filteredCategoryList[index]) !== -1}\n          />\n        </ListItemIcon>\n        <ListItemText primary={categoryArr[0]} />\n        <ListItemIcon>\n          {categoryArr[1] === \"INCOME\" ? (\n            <TrendingUpIcon\n              className={`${classes.icon} ${classes.incomeIcon}`}\n            />\n          ) : (\n            <TrendingDownIcon\n              className={`${classes.icon} ${classes.outcomeIcon}`}\n            />\n          )}\n        </ListItemIcon>\n      </ListItem>\n    );\n  };\n\n  return (\n    <Container maxWidth=\"xs\">\n      <FixedSizeList\n        height={300}\n        width={400}\n        itemSize={50}\n        itemCount={filteredCategoryList.length}\n      >\n        {renderRow}\n      </FixedSizeList>\n    </Container>\n  );\n}\n","import { Box, Container, Grid, styled } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport DatePicker from \"../components/account/DatePicker\";\nimport AccountChart from \"../components/accountStats/AccountChart\";\nimport CategoryFilter from \"../components/accountStats/CategoryFilter\";\nimport CategoryList from \"../components/accountStats/CategoryList\";\nimport Loading from \"../components/core/Loading\";\nimport { useAccountList } from \"../providers/AccountListProvider\";\nimport { useTransactionList } from \"../providers/TransactionListProvider\";\n\nconst GraphBox = styled(Box)({\n  backgroundColor: \"#fff\",\n  borderRadius: 20,\n  padding: \"8px 28px 8px 8px\",\n});\n\nexport default function AccountStats() {\n  const [checked, setChecked] = useState([\n    \"Income total^INCOME\",\n    \"Outcome total^OUTCOME\",\n  ]);\n  const [date, setDate] = useState(new Date());\n  const [searchCategoryText, setSearchCategoryText] = useState(\"\");\n  const { selectedAccount } = useAccountList();\n  const { transactionList, isTransactionLoading } = useTransactionList();\n  const categoryList = [\n    \"Income total^INCOME\",\n    \"Outcome total^OUTCOME\",\n    ...transactionList\n      .filter((t) => [\"INCOME\", \"OUTCOME\"].includes(t.transactionType))\n      .map(\n        (transaction) =>\n          `${transaction.category}^${\n            transaction.transactionType === \"INCOME\" ? \"INCOME\" : \"OUTCOME\"\n          }`\n      )\n      .filter((category, index, self) => self.indexOf(category) === index),\n  ].sort((a, b) => a.category - b.category);\n\n  return (\n    <Container maxWidth=\"md\">\n      {!selectedAccount ? (\n        <Loading />\n      ) : (\n        <Grid container align=\"center\" direction=\"column\" spacing={2}>\n          <Grid item>\n            <DatePicker date={date} setDate={setDate} periodOfTime={\"y\"} />\n          </Grid>\n          {isTransactionLoading ? (\n            <Loading />\n          ) : (\n            <>\n              <Grid item>\n                <GraphBox>\n                  <AccountChart date={date} categoryList={checked} />\n                </GraphBox>\n              </Grid>\n              <Grid item>\n                <CategoryFilter setSearchCategoryText={setSearchCategoryText} />\n              </Grid>\n              <Grid item>\n                <CategoryList\n                  searchCategoryText={searchCategoryText}\n                  categoryList={categoryList}\n                  checked={checked}\n                  setChecked={setChecked}\n                />\n              </Grid>\n              <Grid item />\n            </>\n          )}\n        </Grid>\n      )}\n    </Container>\n  );\n}\n","import { Typography } from \"@material-ui/core\";\n\nexport default function PageTitle({ title }) {\n  return (\n    <Typography variant=\"h4\" align=\"center\">\n      {title}\n    </Typography>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useAuth } from \"../../providers/AuthProvider\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst validationSchema = yup.object({\n  name: yup.string(\"Enter account name\").required(\"Account name is required\"),\n  startBalance: yup\n    .number(\"Enter account start balance\")\n    .typeError(\"Start balance must be a number\")\n    .required(\"Start balance is required\"),\n});\n\nexport default function AddAcountDialog({ open, setOpen }) {\n  const { token } = useAuth();\n  const { setRefreshKey } = useAccountList();\n\n  const addAccount = async (values) => {\n    const { name, startBalance } = values;\n\n    const response = await axios({\n      method: \"post\",\n      url: \"api/account\",\n      data: {\n        name,\n        startBalance,\n        userId: token,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      startBalance: 0,\n    },\n    validationSchema: validationSchema,\n    onSubmit: addAccount,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Add account</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <DialogContentText>Enter account details</DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Account name\"\n            fullWidth\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"startBalance\"\n            label=\"Start balance\"\n            fullWidth\n            value={formik.values.startBalance}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.startBalance && Boolean(formik.errors.startBalance)\n            }\n            helperText={\n              formik.touched.startBalance && formik.errors.startBalance\n            }\n          />\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst validationSchema = yup.object({\n  name: yup.string(\"Enter account name\").required(\"Account name is required\"),\n  startBalance: yup\n    .number(\"Enter account start balance\")\n    .typeError(\"Start balance must be a number\")\n    .required(\"Start balance is required\"),\n});\n\nexport default function ModifyAccountDialog({ open, setOpen, account }) {\n  const { setRefreshKey } = useAccountList();\n  const modifyAccount = async (values) => {\n    const { name, startBalance } = values;\n\n    const response = await axios({\n      method: \"put\",\n      url: `api/account/${account.id}`,\n      data: {\n        name,\n        startBalance,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: account ? account : { name: \"\", startBalance: \"\" },\n    validationSchema: validationSchema,\n    onSubmit: modifyAccount,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Modify account</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Account name\"\n            fullWidth\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"startBalance\"\n            label=\"Start balance balance\"\n            fullWidth\n            value={formik.values.startBalance}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.startBalance && Boolean(formik.errors.startBalance)\n            }\n            helperText={\n              formik.touched.startBalance && formik.errors.startBalance\n            }\n          />\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@material-ui/core\";\n\nexport default function ConfirmDialog({ open, setOpen, handleAction }) {\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Are you sure you want to delete this item?</DialogTitle>\n      <DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button color=\"primary\" onClick={handleAction}>\n            Delete\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Avatar,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport ModifyAccountDialog from \"./ModifyAccountDialog\";\nimport { useState } from \"react\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\nimport axios from \"../../axios-instance\";\nimport ConfirmDialog from \"../core/ConfirmDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  accountAvatar: {\n    backgroundColor: theme.green,\n  },\n  accountItem: {\n    backgroundColor: theme.white,\n    borderRadius: 20,\n    marginBottom: 5,\n  },\n}));\n\nexport default function AccountItem({ account }) {\n  const [isModifyDialogOpen, setIsModifyDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const { setRefreshKey } = useAccountList();\n  const classes = useStyles();\n\n  const deleteAccount = async (id) => {\n    const response = await axios({\n      method: \"delete\",\n      url: `api/account/${id}`,\n    });\n    if (response.status === 200) {\n      setIsDeleteDialogOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  return (\n    <>\n      <ListItem key={account.id} className={classes.accountItem}>\n        <ListItemAvatar>\n          <Avatar className={classes.accountAvatar} variant=\"rounded\">\n            <AccountBalanceWalletIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText\n          primary={account.name}\n          secondary={`Start balance: ${account.startBalance}`}\n        />\n        <ListItemSecondaryAction>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"edit\"\n            onClick={() => setIsModifyDialogOpen(true)}\n          >\n            <SettingsIcon />\n          </IconButton>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            onClick={() => setIsDeleteDialogOpen(true)}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n      <ModifyAccountDialog\n        open={isModifyDialogOpen}\n        setOpen={setIsModifyDialogOpen}\n        account={account}\n      />\n      <ConfirmDialog\n        open={isDeleteDialogOpen}\n        setOpen={setIsDeleteDialogOpen}\n        handleAction={() => deleteAccount(account.id)}\n      />\n    </>\n  );\n}\n","import { List } from \"@material-ui/core\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\nimport AccountItem from \"./AccountItem\";\n\nexport default function AccountList() {\n  const { accountList } = useAccountList();\n\n  return (\n    <List>\n      {accountList\n        .filter((account) => account.id !== 0)\n        .map((account) => (\n          <AccountItem key={account.id} account={account} />\n        ))}\n    </List>\n  );\n}\n","import { Button, Container, Grid } from \"@material-ui/core\";\nimport PageTitle from \"../components/core/PageTitle\";\nimport { useState } from \"react\";\nimport AddAccountDialog from \"../components/manageAccount/AddAccountDialog\";\nimport AccountList from \"../components/manageAccount/AccountList\";\nimport { useAccountList } from \"../providers/AccountListProvider\";\nimport Loading from \"../components/core/Loading\";\n\nexport default function ManageAccount() {\n  const { isAccountLoading } = useAccountList();\n  const [addAccountOpen, setAddAccountOpen] = useState(false);\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Grid container align=\"center\" direction=\"column\" spacing={3}>\n        <Grid item>\n          <PageTitle title=\"Manage accounts\" />\n        </Grid>\n        <Grid item>{isAccountLoading ? <Loading /> : <AccountList />}</Grid>\n        <Grid item>\n          <Button\n            size=\"large\"\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => setAddAccountOpen(true)}\n          >\n            Add account\n          </Button>\n        </Grid>\n      </Grid>\n      <AddAccountDialog open={addAccountOpen} setOpen={setAddAccountOpen} />\n    </Container>\n  );\n}\n","import {\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nconst drawerWidth = 240;\n\nconst useStyle = makeStyles((theme) => ({\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n  },\n}));\n\nexport default function LeftDrawer({ drawerOpen, items }) {\n  const classes = useStyle();\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const currentPage = pathname.substring(1);\n\n  return (\n    <Drawer\n      variant=\"permanent\"\n      className={clsx(classes.drawer, {\n        [classes.drawerOpen]: drawerOpen,\n        [classes.drawerClose]: !drawerOpen,\n      })}\n      classes={{\n        paper: clsx({\n          [classes.drawerOpen]: drawerOpen,\n          [classes.drawerClose]: !drawerOpen,\n        }),\n      }}\n    >\n      <div className={classes.toolbar}>\n        <Typography variant=\"h6\" color=\"primary\">\n          eWallet\n        </Typography>\n      </div>\n      <Divider />\n      <List>\n        {Object.entries(items).map(([key, item]) => (\n          <ListItem\n            button\n            onClick={() => history.push(key)}\n            key={key}\n            selected={key === currentPage}\n          >\n            <ListItemIcon>{item.icon}</ListItemIcon>\n            <ListItemText primary={item.title} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n  );\n}\n","import {\n  AppBar,\n  Fade,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport { useAuth } from \"../../../providers/AuthProvider\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\n\nconst drawerWidth = 240;\n\nconst useStyle = makeStyles((theme) => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  logoutButton: {\n    marginLeft: \"auto\",\n  },\n}));\n\nexport default function Nav({\n  drawerOpen,\n  handleDrawerOpen,\n  handleDrawerClose,\n}) {\n  const classes = useStyle();\n  const { logOut } = useAuth();\n  return (\n    <AppBar\n      position=\"fixed\"\n      className={clsx(classes.appBar, {\n        [classes.appBarShift]: drawerOpen,\n      })}\n    >\n      <Toolbar>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={drawerOpen ? handleDrawerClose : handleDrawerOpen}\n          edge=\"start\"\n          className={classes.menuButton}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Fade in={!drawerOpen}>\n          <Typography variant=\"h6\" noWrap>\n            eWallet\n          </Typography>\n        </Fade>\n        <IconButton\n          color=\"inherit\"\n          className={classes.logoutButton}\n          onClick={logOut}\n        >\n          <ExitToAppIcon />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import { useState } from \"react\";\nimport LeftDrawer from \"./LeftDrawer\";\nimport Nav from \"./Nav\";\n\nexport default function HeadLayout({ navItems }) {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  const handleDrawerClose = () => {\n    setDrawerOpen(false);\n  };\n\n  const handleDrawerOpen = () => {\n    setDrawerOpen(true);\n  };\n\n  return (\n    <>\n      <Nav\n        drawerOpen={drawerOpen}\n        handleDrawerClose={handleDrawerClose}\n        handleDrawerOpen={handleDrawerOpen}\n      />\n      <LeftDrawer drawerOpen={drawerOpen} items={navItems} />\n    </>\n  );\n}\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport { useAuth } from \"./providers/AuthProvider\";\nimport {\n  createMuiTheme,\n  CssBaseline,\n  makeStyles,\n  MuiThemeProvider,\n} from \"@material-ui/core\";\nimport { green, red } from \"@material-ui/core/colors\";\nimport Account from \"./pages/Account\";\nimport AccountStats from \"./pages/AccountStats\";\nimport ManageAccount from \"./pages/ManageAccount\";\nimport AccountListProvider from \"./providers/AccountListProvider\";\nimport TransactionListProvider from \"./providers/TransactionListProvider\";\nimport LocalAtmIcon from \"@material-ui/icons/LocalAtm\";\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\nimport HeadLayout from \"./components/core/layout/HeadLayout\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#85bb65\",\n    },\n    secondary: {\n      main: \"#ffc400\",\n    },\n    background: {\n      default: \"#fafafa\",\n    },\n  },\n  white: \"#fff\",\n  black: \"#000\",\n  green: green[500],\n  red: red[500],\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    marginTop: 60,\n  },\n}));\n\nconst pages = {\n  account: {\n    icon: <LocalAtmIcon />,\n    title: \"Account page\",\n  },\n  accountStats: {\n    icon: <AssessmentIcon />,\n    title: \"Account stats\",\n  },\n  manageAccount: {\n    icon: <AccountBalanceWalletIcon />,\n    title: \"Manage accounts\",\n  },\n};\n\nfunction App() {\n  const { token } = useAuth();\n  const classes = useStyles();\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Switch>\n        {token ? (\n          <AccountListProvider>\n            <TransactionListProvider>\n              <div className={classes.root}>\n                <HeadLayout navItems={pages} />\n                <div className={classes.content}>\n                  <Route path=\"/account\">\n                    <Account />\n                  </Route>\n                  <Route path=\"/accountStats\">\n                    <AccountStats />\n                  </Route>\n                  <Route path=\"/manageAccount\">\n                    <ManageAccount />\n                  </Route>\n                  <Route strict exact path=\"/\">\n                    <Redirect to=\"/account\" />\n                  </Route>\n                </div>\n              </div>\n            </TransactionListProvider>\n          </AccountListProvider>\n        ) : (\n          <>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n            <Route path=\"/register\">\n              <Register />\n            </Route>\n            <Route strict exact path=\"/\">\n              <Redirect to=\"/login\" />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { AuthProvider } from \"./providers/AuthProvider\";\n\nReactDOM.render(\n  <Router>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}