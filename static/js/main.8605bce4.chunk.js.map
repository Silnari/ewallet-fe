{"version":3,"sources":["providers/AuthProvider.jsx","components/login/LoginTitle.jsx","components/login/LoginContainer.jsx","components/login/LoginCard.jsx","axios-instance.js","pages/Login.jsx","pages/Register.jsx","components/core/layout/LeftDrawer.jsx","components/core/layout/Nav.jsx","components/core/layout/HeadLayout.jsx","components/account/DatePicker.jsx","providers/AccountListProvider.jsx","providers/TransactionListProvider.jsx","components/account/AddTransactionDialog.jsx","components/account/ModifyTransactionDialog.jsx","components/account/ModifyTransferDialog.jsx","components/account/TransactionItem.jsx","components/account/TransactionList.jsx","components/core/Loading.jsx","components/core/LabelledOutline.jsx","components/account/Balance.jsx","components/account/AddTransferDialog.jsx","components/account/NoAccount.jsx","pages/Account.jsx","components/core/PageTitle.jsx","components/manageAccount/AddAccountDialog.jsx","components/manageAccount/ModifyAccountDialog.jsx","components/core/ConfirmDialog.jsx","components/manageAccount/AccountItem.jsx","components/manageAccount/AccountList.jsx","pages/ManageAccount.jsx","pages/Landing.jsx","App.js","index.js"],"names":["AuthContext","createContext","token","AuthProvider","children","useState","setToken","registerSucess","setRegisterSuccess","history","useHistory","useEffect","tokenFromStorage","localStorage","getItem","Provider","value","logIn","setItem","push","logOut","removeItem","useAuth","useContext","LoginTitle","welcomeText","Box","mb","Typography","display","variant","align","color","LoginContainer","styled","Container","height","alignItems","justifyContent","LoginCard","Card","padding","width","minHeight","axios","create","baseURL","Login","errorMessage","setErrorMessage","doLogin","values","a","login","password","method","url","data","response","status","formik","useFormik","initialValues","onSubmit","CardContent","handleSubmit","Grid","container","direction","spacing","item","TextField","id","label","fullWidth","size","onChange","handleChange","type","Button","onClick","Snackbar","open","autoHideDuration","onClose","Alert","severity","validationSchema","yup","email","required","min","Register","doRegister","error","touched","Boolean","errors","helperText","useStyle","makeStyles","theme","drawer","flexShrink","whiteSpace","drawerOpen","transition","transitions","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","overflowX","breakpoints","up","toolbar","mixins","LeftDrawer","items","currentItem","setCurrentItem","classes","Drawer","className","clsx","paper","Divider","List","Object","entries","map","key","ListItem","button","selected","ListItemIcon","icon","ListItemText","primary","title","appBar","zIndex","appBarShift","marginLeft","menuButton","marginRight","logoutButton","Nav","handleDrawerOpen","handleDrawerClose","AppBar","position","Toolbar","IconButton","aria-label","edge","Fade","in","noWrap","HeadLayout","navItems","currentNavItem","setCurrentNavItem","setDrawerOpen","useStyles","dateBox","borderRadius","backgroundColor","datePicker","minWidth","DatePicker","date","setDate","periodOfTime","setPeriodOfTime","isNextAvaible","setIsNextAvaible","Select","event","period","target","Date","MenuItem","justify","m","moment","subtract","toDate","fontSize","startOf","format","clone","add","printDate","isSame","disabled","AccountListContext","AccountListProvider","accountList","setAccountList","selectedAccount","setSelectedAccount","getAccountListAndSetSelected","getAccountList","setSelectedById","find","account","useAccountList","TransactionListContext","TransactionListProvider","transactionList","setTransactionList","isTransactionLoading","setIsTransactionLoading","refreshKey","setRefreshKey","getTransactionList","undefined","transactionsResponse","incomeResponse","outcomeResponse","concat","i","transactionType","category","o","useTransactionList","typeError","positive","note","max","AddTransactionDialog","setOpen","addTransaction","accountId","oldKey","enableReinitialize","setHours","Dialog","DialogTitle","toLowerCase","DialogContent","name","filter","margin","utils","DateFnsUtils","disableToolbar","maxDate","autoOk","KeyboardButtonProps","setFieldValue","DialogActions","ModifyTransactionDialog","transaction","modifyTransaction","deleteTransaction","ModifyTransferDialog","transfer","modifyTransfer","toAccount","fromAccount","toAccountId","fromAccountId","deleteTransfer","xs","InputLabel","htmlFor","style","paddingTop","includes","nested","transactionSubItem","textAlign","icnomeItem","green","white","marginBottom","outcomeItem","red","incomeAvatar","outcomeAvatar","incomeIcon","outcomeIcon","TransactionItem","header","sortBy","isDialogOpen","setIsDialogOpen","isTransferDialogOpen","setIsTransferDialogOpen","selectedTransaction","setSelectedTransaction","getSubField","ListItemAvatar","Avatar","secondary","length","transactionItem","_","require","round","sumBy","getSum","Collapse","timeout","unmountOnExit","component","disablePadding","handleOpenDialog","TransactionList","getByTransactionType","transactionTypes","getSortByList","sortByList","orderBy","groupBy","x","getIcon","getHeader","spinner","Loading","CircularProgress","root","content","props","fontWeight","inputLabel","left","top","transform","LabelledOutline","labelWidth","setLabelWidth","labelRef","useRef","labelNode","ReactDOM","findDOMNode","current","offsetWidth","marginTop","ref","shrink","notched","BalanceBox","border","positiveBalance","negativeBalance","positiveBalanceBox","borderColor","negativeBalanceBox","Balance","getTransactionSum","sum","getAccountBalance","startBalance","filterByDate","t","AddTransferDialog","addTransfer","tabName","infoBox","NoAccount","mt","goToAccounts","incomeButton","outcomeButton","sortButton","black","accountPicker","maxHeight","maxWidth","Account","addTransactionOpen","setAddTransactionOpen","addTransferOpen","setAddTransferOpen","setTransactionType","setSortBy","flexDirection","PageTitle","AddAcountDialog","addAccount","userId","DialogContentText","autoFocus","ModifyAccountDialog","modifyAccount","ConfirmDialog","handleAction","accountAvatar","accountItem","AccountItem","handleModify","handleDelete","ListItemSecondaryAction","AccountList","setModifyAccountOpen","setDeleteAccountOpen","ManageAccount","addAccountOpen","setAddAccountOpen","modifyAccountOpen","deleteAccountOpen","deleteAccount","pages","body","manageAccount","flexGrow","Landing","activePage","setActivePage","createMuiTheme","palette","main","background","default","App","CssBaseline","path","strict","exact","to","render","document","getElementById"],"mappings":"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","file":"static/js/main.8605bce4.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AuthContext = createContext({ token: null });\r\nconst AuthProvider = ({ children }) => {\r\n  const [token, setToken] = useState(\"\");\r\n  const [registerSucess, setRegisterSuccess] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const tokenFromStorage = localStorage.getItem(\"token\");\r\n    if (tokenFromStorage) setToken(tokenFromStorage);\r\n  }, []);\r\n\r\n  const logIn = (token) => {\r\n    localStorage.setItem(\"token\", token);\r\n    setToken(token);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const logOut = () => {\r\n    localStorage.removeItem(\"token\");\r\n    setToken(null);\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ token, logIn, logOut, registerSucess, setRegisterSuccess }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAuth = () => useContext(AuthContext);\r\n\r\nexport { AuthProvider, useAuth };\r\n","import { Box, Typography } from \"@material-ui/core\";\n\nexport default function LoginTitle({ welcomeText }) {\n  return (\n    <Box mb={4}>\n      <Typography display=\"inline\" variant=\"h4\" align=\"center\">\n        {welcomeText}&nbsp;\n      </Typography>\n      <Typography display=\"inline\" variant=\"h4\" color=\"primary\">\n        eWallet\n      </Typography>\n    </Box>\n  );\n}\n","import { styled } from \"@material-ui/styles\";\nimport { Container } from \"@material-ui/core\";\n\nexport const LoginContainer = styled(Container)({\n  height: \"100vh\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  display: \"flex\",\n});\n","import { styled } from \"@material-ui/styles\";\nimport { Card } from \"@material-ui/core\";\n\nexport const LoginCard = styled(Card)({\n  padding: \"20px 35px 20px 35px\",\n  width: 390,\n  minHeight: 408,\n});\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://ewallet-be.mybluemix.net/\",\n});\n","import { useAuth } from \"../providers/AuthProvider\";\r\nimport {\r\n  Button,\r\n  CardContent,\r\n  Grid,\r\n  TextField,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LoginTitle from \"../components/login/LoginTitle\";\r\nimport { LoginContainer } from \"../components/login/LoginContainer\";\r\nimport { LoginCard } from \"../components/login/LoginCard\";\r\nimport axios from \"../axios-instance\";\r\nimport { useFormik } from \"formik\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Login() {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const { logIn, registerSucess, setRegisterSuccess } = useAuth();\r\n  const history = useHistory();\r\n\r\n  const doLogin = async (values) => {\r\n    const { login, password } = values;\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: \"post\",\r\n        url: \"api/user/authenticate\",\r\n        data: {\r\n          login,\r\n          password,\r\n        },\r\n      });\r\n      if (response.status === 200) {\r\n        logIn(response.data);\r\n      }\r\n    } catch (err) {\r\n      if (err.response.status === 401)\r\n        setErrorMessage(\"Invalid username or password\");\r\n      else setErrorMessage(\"Could not login\");\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      login: \"\",\r\n      password: \"\",\r\n    },\r\n    onSubmit: doLogin,\r\n  });\r\n\r\n  return (\r\n    <LoginContainer>\r\n      <LoginCard>\r\n        <CardContent>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <Grid container align=\"center\" direction=\"column\" spacing={3}>\r\n              <Grid item>\r\n                <LoginTitle welcomeText=\"Log in to\" />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"login\"\r\n                  label=\"Login\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.login}\r\n                  onChange={formik.handleChange}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  label=\"Password\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  onChange={formik.handleChange}\r\n                  value={formik.values.password}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                >\r\n                  Login\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                  onClick={() => history.push(\"/register\")}\r\n                >\r\n                  No account? Register\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </CardContent>\r\n      </LoginCard>\r\n      <Snackbar\r\n        open={!!errorMessage}\r\n        autoHideDuration={7000}\r\n        onClose={() => setErrorMessage(\"\")}\r\n      >\r\n        <Alert severity=\"error\" onClose={() => setErrorMessage(\"\")}>\r\n          {errorMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar\r\n        open={!!registerSucess}\r\n        autoHideDuration={7000}\r\n        onClose={() => setRegisterSuccess(\"\")}\r\n      >\r\n        <Alert severity=\"success\" onClose={() => setRegisterSuccess(\"\")}>\r\n          {registerSucess}\r\n        </Alert>\r\n      </Snackbar>\r\n    </LoginContainer>\r\n  );\r\n}\r\n","import {\r\n  Button,\r\n  CardContent,\r\n  Grid,\r\n  Snackbar,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router\";\r\nimport { LoginContainer } from \"../components/login/LoginContainer\";\r\nimport { LoginCard } from \"../components/login/LoginCard\";\r\nimport LoginTitle from \"../components/login/LoginTitle\";\r\nimport axios from \"../axios-instance\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { useState } from \"react\";\r\nimport { useAuth } from \"../providers/AuthProvider\";\r\n\r\nconst validationSchema = yup.object({\r\n  email: yup\r\n    .string(\"Enter your email\")\r\n    .email(\"Enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  login: yup.string(\"Enter your login\").required(\"Login is required\"),\r\n  password: yup\r\n    .string(\"Enter your password\")\r\n    .min(5, \"Password should be of minimum 5 characters length\")\r\n    .required(\"Password is required\"),\r\n});\r\n\r\nexport default function Register() {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const { setRegisterSuccess } = useAuth();\r\n  const doRegister = async (values) => {\r\n    const { login, email, password } = values;\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: \"post\",\r\n        url: \"api/user/register\",\r\n        data: {\r\n          login,\r\n          email,\r\n          password,\r\n        },\r\n      });\r\n      if (response.status === 200) {\r\n        setRegisterSuccess(\"User registered successfully\");\r\n        history.push(\"login/\");\r\n      }\r\n    } catch (err) {\r\n      if (err.response.status === 400)\r\n        setErrorMessage(\"Login is already taken\");\r\n      else setErrorMessage(\"Could not register user\");\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      login: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: doRegister,\r\n  });\r\n\r\n  const history = useHistory();\r\n  return (\r\n    <LoginContainer>\r\n      <LoginCard>\r\n        <CardContent>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <Grid container align=\"center\" direction=\"column\" spacing={3}>\r\n              <Grid item>\r\n                <LoginTitle welcomeText=\"Register to\" />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"login\"\r\n                  label=\"Login\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.login}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.login && Boolean(formik.errors.login)}\r\n                  helperText={formik.touched.login && formik.errors.login}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"email\"\r\n                  label=\"Email\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.email}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.email && Boolean(formik.errors.email)}\r\n                  helperText={formik.touched.email && formik.errors.email}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  label=\"Password\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.password}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.password && Boolean(formik.errors.password)\r\n                  }\r\n                  helperText={formik.touched.password && formik.errors.password}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                >\r\n                  Register\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                  onClick={() => history.push(\"/login\")}\r\n                >\r\n                  Already have account? Log in\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </CardContent>\r\n      </LoginCard>\r\n      <Snackbar\r\n        open={!!errorMessage}\r\n        autoHideDuration={7000}\r\n        onClose={() => setErrorMessage(\"\")}\r\n      >\r\n        <Alert severity=\"error\" onClose={() => setErrorMessage(\"\")}>\r\n          {errorMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </LoginContainer>\r\n  );\r\n}\r\n","import {\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\n\nconst drawerWidth = 240;\n\nconst useStyle = makeStyles((theme) => ({\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n  },\n}));\n\nexport default function LeftDrawer({\n  drawerOpen,\n  items,\n  currentItem,\n  setCurrentItem,\n}) {\n  const classes = useStyle();\n\n  return (\n    <Drawer\n      variant=\"permanent\"\n      className={clsx(classes.drawer, {\n        [classes.drawerOpen]: drawerOpen,\n        [classes.drawerClose]: !drawerOpen,\n      })}\n      classes={{\n        paper: clsx({\n          [classes.drawerOpen]: drawerOpen,\n          [classes.drawerClose]: !drawerOpen,\n        }),\n      }}\n    >\n      <div className={classes.toolbar}>\n        <Typography variant=\"h6\" color=\"primary\">\n          eWallet\n        </Typography>\n      </div>\n      <Divider />\n      <List>\n        {Object.entries(items).map(([key, item]) => (\n          <ListItem\n            button\n            onClick={() => setCurrentItem(key)}\n            key={key}\n            selected={currentItem === key}\n          >\n            <ListItemIcon>{item.icon}</ListItemIcon>\n            <ListItemText primary={item.title} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n  );\n}\n","import {\n  AppBar,\n  Fade,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport { useAuth } from \"../../../providers/AuthProvider\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\n\nconst drawerWidth = 240;\n\nconst useStyle = makeStyles((theme) => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  logoutButton: {\n    marginLeft: \"auto\",\n  },\n}));\n\nexport default function Nav({\n  drawerOpen,\n  handleDrawerOpen,\n  handleDrawerClose,\n}) {\n  const classes = useStyle();\n  const { logOut } = useAuth();\n  return (\n    <AppBar\n      position=\"fixed\"\n      className={clsx(classes.appBar, {\n        [classes.appBarShift]: drawerOpen,\n      })}\n    >\n      <Toolbar>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={drawerOpen ? handleDrawerClose : handleDrawerOpen}\n          edge=\"start\"\n          className={classes.menuButton}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Fade in={!drawerOpen}>\n          <Typography variant=\"h6\" noWrap>\n            eWallet\n          </Typography>\n        </Fade>\n        <IconButton\n          color=\"inherit\"\n          className={classes.logoutButton}\n          onClick={logOut}\n        >\n          <ExitToAppIcon />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import { useState } from \"react\";\nimport LeftDrawer from \"./LeftDrawer\";\nimport Nav from \"./Nav\";\n\nexport default function HeadLayout({\n  navItems,\n  currentNavItem,\n  setCurrentNavItem,\n}) {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  const handleDrawerClose = () => {\n    setDrawerOpen(false);\n  };\n\n  const handleDrawerOpen = () => {\n    setDrawerOpen(true);\n  };\n\n  return (\n    <>\n      <Nav\n        drawerOpen={drawerOpen}\n        handleDrawerClose={handleDrawerClose}\n        handleDrawerOpen={handleDrawerOpen}\n      />\n      <LeftDrawer\n        drawerOpen={drawerOpen}\n        items={navItems}\n        currentItem={currentNavItem}\n        setCurrentItem={setCurrentNavItem}\n      />\n    </>\n  );\n}\n","import {\n  Box,\n  Grid,\n  IconButton,\n  MenuItem,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport moment from \"moment\";\nimport { useState } from \"react\";\n\nconst useStyles = makeStyles(() => ({\n  dateBox: {\n    borderRadius: 20,\n    display: \"inline-box\",\n    padding: \"10px 20px 10px 20px\",\n    backgroundColor: \"#fff\",\n    width: 410,\n    // eslint-disable-next-line\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  datePicker: {\n    minWidth: 120,\n  },\n}));\n\nexport default function DatePicker({\n  date,\n  setDate,\n  periodOfTime,\n  setPeriodOfTime,\n}) {\n  const [isNextAvaible, setIsNextAvaible] = useState(false);\n  const classes = useStyles();\n\n  const printDate = (date, periodOfTime) => {\n    var m = moment(date);\n    if (periodOfTime === \"w\")\n      return (\n        m.startOf(\"isoweek\").format(\"MMMM Do\") +\n        \" - \" +\n        m.clone().startOf(\"isoweek\").add(6, \"d\").format(\"MMMM Do[, ]YYYY\")\n      );\n    if (periodOfTime === \"M\") return m.format(\"MMMM[, ]YYYY\");\n    if (periodOfTime === \"y\") return m.format(\"YYYY\");\n  };\n\n  const nextDate = () => {\n    var m = moment(date);\n\n    setDate(\n      periodOfTime === \"d\"\n        ? m.add(7, periodOfTime).toDate()\n        : m.add(1, periodOfTime).toDate()\n    );\n\n    if (moment(new Date()).isSame(m, \"day\")) setIsNextAvaible(false);\n  };\n\n  const prevDate = () => {\n    var m = moment(date);\n\n    setDate(\n      periodOfTime === \"d\"\n        ? m.subtract(7, periodOfTime).toDate()\n        : m.subtract(1, periodOfTime).toDate()\n    );\n\n    setIsNextAvaible(true);\n  };\n\n  const handlePeriodOfTimeChange = (event) => {\n    const period = event.target.value;\n    setPeriodOfTime(period);\n    setIsNextAvaible(false);\n    setDate(new Date());\n  };\n\n  return (\n    <Grid container direction=\"column\" spacing={1}>\n      <Grid item>\n        <Select\n          id=\"period-of-time\"\n          value={periodOfTime}\n          onChange={handlePeriodOfTimeChange}\n          className={classes.datePicker}\n        >\n          <MenuItem value={\"w\"}>Week</MenuItem>\n          <MenuItem value={\"M\"}>Month</MenuItem>\n          <MenuItem value={\"y\"}>Year</MenuItem>\n        </Select>\n      </Grid>\n      <Grid item>\n        <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\n          <IconButton color=\"inherit\" onClick={prevDate}>\n            <ChevronLeftIcon fontSize=\"large\" />\n          </IconButton>\n          <Box className={classes.dateBox}>\n            <Typography variant=\"h6\">\n              {printDate(date, periodOfTime)}\n            </Typography>\n          </Box>\n          <IconButton\n            color=\"inherit\"\n            onClick={nextDate}\n            disabled={!isNextAvaible}\n          >\n            <ChevronRightIcon fontSize=\"large\" />\n          </IconButton>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"../axios-instance\";\nimport { useAuth } from \"./AuthProvider\";\n\nconst AccountListContext = createContext();\nexport default function AccountListProvider({ children }) {\n  const [accountList, setAccountList] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const { token } = useAuth();\n\n  const getAccountListAndSetSelected = async () => {\n    const response = await axios({\n      method: \"get\",\n      url: `api/account/${token}`,\n    });\n    if (response.status === 200) {\n      setAccountList(response.data);\n      setSelectedAccount(response.data[0]);\n    }\n  };\n\n  const getAccountList = async () => {\n    const response = await axios({\n      method: \"get\",\n      url: `api/account/${token}`,\n    });\n    if (response.status === 200) {\n      setAccountList(response.data);\n    }\n  };\n\n  useEffect(() => {\n    getAccountListAndSetSelected();\n    // eslint-disable-next-line\n  }, []);\n\n  const setSelectedById = (id) => {\n    setSelectedAccount(accountList.find((account) => account.id === id));\n  };\n\n  return (\n    <AccountListContext.Provider\n      value={{\n        accountList,\n        getAccountList,\n        selectedAccount,\n        setSelectedById,\n      }}\n    >\n      {children}\n    </AccountListContext.Provider>\n  );\n}\n\nexport const useAccountList = () => useContext(AccountListContext);\n","import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useAccountList } from \"./AccountListProvider\";\nimport axios from \"../axios-instance\";\nimport { useAuth } from \"./AuthProvider\";\n\nconst TransactionListContext = createContext();\nexport default function TransactionListProvider({ children }) {\n  const [transactionList, setTransactionList] = useState([]);\n  const [isTransactionLoading, setIsTransactionLoading] = useState(false);\n  const [refreshKey, setRefreshKey] = useState(0);\n  const { selectedAccount } = useAccountList();\n  const { token } = useAuth();\n\n  const getTransactionList = async () => {\n    if (selectedAccount === undefined || selectedAccount === null) return;\n    setIsTransactionLoading(true);\n    const transactionsResponse = await axios({\n      method: \"get\",\n      url: `api/transaction/${token}/${selectedAccount?.id}`,\n    });\n\n    if (selectedAccount.id === 0 && transactionsResponse.status === 200) {\n      setTransactionList(transactionsResponse.data);\n      setIsTransactionLoading(false);\n      return;\n    }\n\n    const incomeResponse = await axios({\n      method: \"get\",\n      url: `api/transfer/to/${selectedAccount.id}`,\n    });\n\n    const outcomeResponse = await axios({\n      method: \"get\",\n      url: `api/transfer/from/${selectedAccount.id}`,\n    });\n\n    if (\n      transactionsResponse.status === 200 &&\n      incomeResponse.status === 200 &&\n      outcomeResponse.status === 200\n    ) {\n      setTransactionList(\n        transactionsResponse.data.concat(\n          incomeResponse.data.map((i) => {\n            i.transactionType = \"TRANSFER-INCOME\";\n            i.category = \"Transfer\";\n            return i;\n          }),\n          outcomeResponse.data.map((o) => {\n            o.transactionType = \"TRANSFER-OUTCOME\";\n            o.category = \"Transfer\";\n            return o;\n          })\n        )\n      );\n      setIsTransactionLoading(false);\n    }\n  };\n\n  useEffect(\n    () => getTransactionList(),\n    // eslint-disable-next-line\n    [selectedAccount, refreshKey]\n  );\n\n  return (\n    <TransactionListContext.Provider\n      value={{\n        transactionList,\n        isTransactionLoading,\n        setRefreshKey,\n      }}\n    >\n      {children}\n    </TransactionListContext.Provider>\n  );\n}\n\nexport const useTransactionList = () => useContext(TransactionListContext);\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  category: yup.string(\"Enter category\").required(\"Category is required\"),\n  date: yup\n    .date(\"Enter date\")\n    .typeError(\"Enter date with valid format (dd/mm/yyyy)\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function AddTransactionDialog({\n  open,\n  setOpen,\n  selectedAccount,\n  accountList,\n  transactionType,\n}) {\n  const { setRefreshKey } = useTransactionList();\n\n  const addTransaction = async (values) => {\n    const { account, value, note, category, date } = values;\n    const response = await axios({\n      method: \"post\",\n      url: \"api/transaction\",\n      data: {\n        accountId: account,\n        value,\n        note,\n        category,\n        date,\n        transactionType,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      account:\n        selectedAccount?.id !== 0 ? selectedAccount.id : accountList[0].id,\n      value: 0,\n      note: \"\",\n      category: \"\",\n      date: new Date(new Date().setHours(0, 0, 0, 0)),\n    },\n    validationSchema: validationSchema,\n    onSubmit: addTransaction,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Add new {transactionType.toLowerCase()}</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <Select\n            id=\"account\"\n            name=\"account\"\n            value={formik.values.account}\n            fullWidth\n            onChange={formik.handleChange}\n            error={formik.touched.account && Boolean(formik.errors.account)}\n          >\n            {accountList\n              .filter((account) => account.id !== 0)\n              .map((account) => (\n                <MenuItem key={account.id} value={account.id}>\n                  {account.name}\n                </MenuItem>\n              ))}\n          </Select>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"category\"\n            label=\"Category\"\n            fullWidth\n            value={formik.values.category}\n            onChange={formik.handleChange}\n            error={formik.touched.category && Boolean(formik.errors.category)}\n            helperText={formik.touched.category && formik.errors.category}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  category: yup.string(\"Enter category\").required(\"Category is required\"),\n  date: yup\n    .date(\"Enter date\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function ModifyTransactionDialog({\n  open,\n  setOpen,\n  transaction,\n}) {\n  const { setRefreshKey } = useTransactionList();\n\n  const modifyTransaction = async (values) => {\n    const { value, note, category, date } = values;\n\n    const response = await axios({\n      method: \"put\",\n      url: `/api/transaction/${transaction.id}`,\n      data: {\n        value,\n        note,\n        category,\n        date,\n      },\n    });\n\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const deleteTransaction = async () => {\n    const response = await axios({\n      method: \"delete\",\n      url: `/api/transaction/${transaction.id}`,\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: transaction ? transaction : {},\n    validationSchema: validationSchema,\n    onSubmit: modifyTransaction,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Modify transaction</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"category\"\n            label=\"Category\"\n            fullWidth\n            value={formik.values.category}\n            onChange={formik.handleChange}\n            error={formik.touched.category && Boolean(formik.errors.category)}\n            helperText={formik.touched.category && formik.errors.category}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={deleteTransaction}\n            >\n              Delete\n            </Button>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  date: yup\n    .date(\"Enter date\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function ModifyTransferDialog({\n  open,\n  setOpen,\n  accountList,\n  transfer,\n}) {\n  const { setRefreshKey } = useTransactionList();\n\n  const modifyTransfer = async (values) => {\n    const { toAccount, fromAccount, value, note, date } = values;\n    const response = await axios({\n      method: \"put\",\n      url: `api/transfer/${transfer.id}`,\n      data: {\n        toAccountId: toAccount,\n        fromAccountId: fromAccount,\n        value,\n        note,\n        date,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const deleteTransfer = async () => {\n    const response = await axios({\n      method: \"delete\",\n      url: `/api/transfer/${transfer.id}`,\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: transfer\n      ? {\n          fromAccount: transfer.fromAccountId,\n          toAccount: transfer.toAccountId,\n          value: transfer.value,\n          note: transfer.note,\n          date: transfer.date,\n        }\n      : {},\n    validationSchema: validationSchema,\n    onSubmit: modifyTransfer,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Modify transfer</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <Grid container align=\"center\" direction=\"row\">\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"fromAccount\">\n                From:\n              </InputLabel>\n              <Select\n                id=\"fromAccount\"\n                name=\"fromAccount\"\n                fullWidth\n                value={formik.values.fromAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.fromAccount &&\n                  Boolean(formik.errors.fromAccount)\n                }\n              >\n                {accountList\n                  .filter((account) => account.id !== 0)\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n            <Grid item xs={2} style={{ paddingTop: 20 }}>\n              <ArrowRightAltIcon />\n            </Grid>\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"toAccount\">\n                To:\n              </InputLabel>\n              <Select\n                fullWidth\n                id=\"toAccount\"\n                name=\"toAccount\"\n                value={formik.values.toAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.toAccount && Boolean(formik.errors.toAccount)\n                }\n              >\n                {accountList\n                  .filter(\n                    (account) =>\n                      ![formik.values.fromAccount, 0].includes(account.id)\n                  )\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n          </Grid>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={deleteTransfer}\n            >\n              Delete\n            </Button>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Avatar,\n  Collapse,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport moment from \"moment\";\nimport ModifyTransactionDialog from \"./ModifyTransactionDialog\";\nimport ModifyTransferDialog from \"./ModifyTransferDialog\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst useStyles = makeStyles((theme) => ({\n  nested: {\n    marginLeft: theme.spacing(4),\n    borderRadius: 50,\n    width: 450,\n  },\n  transactionSubItem: {\n    textAlign: \"right\",\n  },\n  icnomeItem: {\n    color: theme.green,\n    backgroundColor: theme.white,\n    borderRadius: 20,\n    marginBottom: 5,\n  },\n  outcomeItem: {\n    color: theme.red,\n    backgroundColor: theme.white,\n    borderRadius: 20,\n    marginBottom: 5,\n  },\n  incomeAvatar: {\n    backgroundColor: theme.green,\n  },\n  outcomeAvatar: {\n    backgroundColor: theme.red,\n  },\n  incomeIcon: {\n    color: theme.green,\n  },\n  outcomeIcon: {\n    color: theme.red,\n  },\n}));\n\nexport default function TransactionItem({\n  header,\n  icon,\n  transactionList,\n  sortBy,\n  type,\n}) {\n  const [open, setOpen] = useState(false);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isTransferDialogOpen, setIsTransferDialogOpen] = useState(false);\n  const [selectedTransaction, setSelectedTransaction] = useState(null);\n  const { accountList } = useAccountList();\n  const classes = useStyles();\n\n  const getSubField = (transaction) => {\n    if (sortBy === \"category\")\n      return moment(transaction.date).format(\"dddd, MMMM Do YYYY\");\n    return transaction.category;\n  };\n\n  const getSum = (transactionItem) => {\n    var _ = require(\"lodash\");\n    return _.round(_.sumBy(transactionItem, \"value\"), 2);\n  };\n\n  const handleOpenDialog = (transaction) => {\n    setSelectedTransaction(transaction);\n    if ([\"INCOME\", \"OUTCOME\"].includes(transaction.transactionType))\n      setIsDialogOpen(true);\n    else setIsTransferDialogOpen(true);\n  };\n\n  return (\n    <>\n      <ListItem\n        key={header + type}\n        className={type === \"INCOME\" ? classes.icnomeItem : classes.outcomeItem}\n        button\n        onClick={() => setOpen(!open)}\n      >\n        <ListItemAvatar>\n          <Avatar\n            className={\n              type === \"INCOME\" ? classes.incomeAvatar : classes.outcomeAvatar\n            }\n            variant=\"rounded\"\n          >\n            {icon}\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText\n          primary={header}\n          secondary={`Transactions: ${transactionList?.length}`}\n        />\n        <ListItemText\n          className={classes.transactionSubItem}\n          primary={`${getSum(transactionList)} zł`}\n        />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {transactionList.map((transaction) => (\n            <ListItem\n              key={transaction.id}\n              className={classes.nested}\n              button\n              onClick={() => {\n                handleOpenDialog(transaction);\n              }}\n            >\n              <ListItemIcon>\n                <FiberManualRecordIcon\n                  fontSize=\"small\"\n                  className={\n                    type === \"INCOME\" ? classes.incomeIcon : classes.outcomeIcon\n                  }\n                />\n              </ListItemIcon>\n              <ListItemText\n                primary={`${transaction.value} zł`}\n                secondary={transaction.note}\n              />\n              <ListItemText\n                className={classes.transactionSubItem}\n                secondary={getSubField(transaction)}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </Collapse>\n      <ModifyTransactionDialog\n        open={isDialogOpen}\n        setOpen={setIsDialogOpen}\n        transaction={selectedTransaction}\n      />\n      <ModifyTransferDialog\n        open={isTransferDialogOpen}\n        setOpen={setIsTransferDialogOpen}\n        transfer={selectedTransaction}\n        accountList={accountList}\n      />\n    </>\n  );\n}\n","import { List } from \"@material-ui/core\";\nimport TransactionItem from \"./TransactionItem\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport EventIcon from \"@material-ui/icons/Event\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport default function TransactionList({\n  transactionList,\n  sortBy,\n  date,\n  periodOfTime,\n}) {\n  const getPeriod = () => {\n    if (periodOfTime === \"w\") return \"isoWeek\";\n    if (periodOfTime === \"M\") return \"month\";\n    return \"year\";\n  };\n\n  const getByTransactionType = (transactionTypes) => {\n    const filteredByDate = transactionList.filter((transaction) =>\n      moment(transaction.date).isSame(moment(date), getPeriod())\n    );\n\n    return filteredByDate.filter((transaction) =>\n      transactionTypes.includes(transaction.transactionType)\n    );\n  };\n\n  const getSortByList = (transactionList) => {\n    const sortByList = _.orderBy(\n      _.groupBy(transactionList, sortBy),\n      [(item) => _.sumBy(item, \"value\")],\n      \"desc\"\n    );\n    return _.map(sortByList, (x) => _.orderBy(x, \"value\", \"desc\"));\n  };\n\n  const getIcon = () =>\n    sortBy === \"category\" ? <FolderOpenIcon /> : <EventIcon />;\n\n  const getHeader = (transactionItem) =>\n    sortBy === \"date\"\n      ? moment(transactionItem[0].date).format(\"dddd, MMMM Do YYYY\")\n      : transactionItem[0].category;\n\n  return (\n    <List>\n      {getSortByList(getByTransactionType([\"INCOME\", \"TRANSFER-INCOME\"])).map(\n        (transactionItem) => (\n          <TransactionItem\n            key={transactionItem[0][sortBy] + \"INCOME\"}\n            type=\"INCOME\"\n            icon={getIcon()}\n            transactionList={transactionItem}\n            sortBy={sortBy}\n            header={getHeader(transactionItem)}\n          />\n        )\n      )}\n      {getSortByList(getByTransactionType([\"OUTCOME\", \"TRANSFER-OUTCOME\"])).map(\n        (transactionItem) => (\n          <TransactionItem\n            key={transactionItem[0][sortBy] + \"OUTCOME\"}\n            type=\"OUTCOME\"\n            icon={getIcon()}\n            transactionList={transactionItem}\n            sortBy={sortBy}\n            header={getHeader(transactionItem)}\n          />\n        )\n      )}\n    </List>\n  );\n}\n","import { Box, CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyle = makeStyles((theme) => ({\n  spinner: {\n    height: \"40vh\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    display: \"flex\",\n  },\n}));\n\nexport default function Loading() {\n  const classes = useStyle();\n\n  return (\n    <Box className={classes.spinner}>\n      <CircularProgress />\n    </Box>\n  );\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport NotchedOutline from \"@material-ui/core/OutlinedInput/NotchedOutline\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  content: (props) => ({\n    padding: \"15px 14px\",\n    borderRadius: 10,\n    width: 195,\n    height: 50,\n    fontWeight: \"bold\",\n    backgroundColor: theme.white,\n    color: props.color,\n  }),\n  inputLabel: {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    transform: \"translate(0, 24px) scale(1)\",\n  },\n}));\n\nexport default function LabelledOutline({ id, label, children, color }) {\n  const [labelWidth, setLabelWidth] = useState(0);\n  const labelRef = useRef(null);\n  const classes = useStyles({ color: color });\n\n  useEffect(() => {\n    const labelNode = ReactDOM.findDOMNode(labelRef.current);\n    setLabelWidth(labelNode != null ? labelNode.offsetWidth : 0);\n  }, [label]);\n\n  return (\n    <div style={{ position: \"relative\", marginTop: \"8px\" }}>\n      <InputLabel\n        ref={labelRef}\n        htmlFor={id}\n        variant=\"outlined\"\n        className={classes.inputLabel}\n        shrink\n      >\n        {label}\n      </InputLabel>\n      <div className={classes.root}>\n        <div id={id} className={classes.content}>\n          {children}\n          <NotchedOutline notched labelWidth={labelWidth} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { Box, Grid, makeStyles, styled } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport LabelledOutline from \"../core/LabelledOutline\";\n\nconst BalanceBox = styled(Box)({\n  border: \"2px solid\",\n  borderRadius: 10,\n  padding: 10,\n  width: 195,\n  fontWeight: \"bold\",\n  backgroundColor: \"#fff\",\n});\n\nconst useStyles = makeStyles((theme) => ({\n  positiveBalance: {\n    color: theme.green,\n  },\n  negativeBalance: {\n    color: theme.red,\n  },\n  positiveBalanceBox: {\n    borderColor: theme.green,\n    color: theme.green,\n  },\n  negativeBalanceBox: {\n    borderColor: theme.red,\n    color: theme.red,\n  },\n}));\n\nexport default function Balance({\n  account,\n  transactionList,\n  date,\n  periodOfTime,\n}) {\n  const classes = useStyles();\n\n  const getPeriod = () => {\n    if (periodOfTime === \"w\") return \"isoWeek\";\n    if (periodOfTime === \"M\") return \"month\";\n    return \"year\";\n  };\n\n  const getTransactionSum = (transactionList) =>\n    _.sum(\n      transactionList.map((transaction) =>\n        [\"INCOME\", \"TRANSFER-INCOME\"].includes(transaction.transactionType)\n          ? transaction.value\n          : -transaction.value\n      )\n    );\n\n  const getAccountBalance = () =>\n    _.round(account.startBalance + getTransactionSum(transactionList), 2);\n\n  const filterByDate = () =>\n    transactionList.filter((transaction) =>\n      moment(transaction.date).isSame(moment(date), getPeriod())\n    );\n\n  const getIncomeSum = () =>\n    _.round(\n      _.sumBy(\n        filterByDate().filter((t) =>\n          [\"INCOME\", \"TRANSFER-INCOME\"].includes(t.transactionType)\n        ),\n        \"value\"\n      ),\n      2\n    );\n\n  const getOutcomeSum = () =>\n    _.round(\n      _.sumBy(\n        filterByDate().filter((t) =>\n          [\"OUTCOME\", \"TRANSFER-OUTCOME\"].includes(t.transactionType)\n        ),\n        \"value\"\n      ),\n      2\n    );\n\n  const getSum = () => _.round(getTransactionSum(filterByDate()), 2);\n\n  return (\n    <Box>\n      <Grid container alignItems=\"center\" direction=\"column\" spacing={1}>\n        <Grid item>\n          <Grid container spacing={2}>\n            <Grid item>\n              <BalanceBox className={classes.positiveBalanceBox}>\n                {getIncomeSum()} zł\n              </BalanceBox>\n            </Grid>\n            <Grid item>\n              <BalanceBox className={classes.negativeBalanceBox}>\n                {getOutcomeSum()} zł\n              </BalanceBox>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <Grid container spacing={2}>\n            <Grid item>\n              <LabelledOutline\n                id=\"monthly\"\n                label=\"Monthly\"\n                color={getSum() > 0 ? \"green\" : \"red\"}\n              >\n                {getSum()} zł\n              </LabelledOutline>\n            </Grid>\n            <Grid item>\n              <LabelledOutline\n                id=\"account\"\n                label=\"Account\"\n                color={getAccountBalance() > 0 ? \"green\" : \"red\"}\n              >\n                {getAccountBalance()} zł\n              </LabelledOutline>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  date: yup\n    .date(\"Enter date\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function AddTransferDialog({\n  open,\n  setOpen,\n  selectedAccount,\n  accountList,\n}) {\n  const { setRefreshKey } = useTransactionList();\n\n  const addTransfer = async (values) => {\n    const { toAccount, fromAccount, value, note, date } = values;\n    const response = await axios({\n      method: \"post\",\n      url: \"api/transfer\",\n      data: {\n        toAccountId: toAccount,\n        fromAccountId: fromAccount,\n        value,\n        note,\n        date,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      fromAccount:\n        selectedAccount.id !== 0 ? selectedAccount.id : accountList[0].id,\n      toAccount: accountList[1]?.id,\n      value: 0,\n      note: \"\",\n      date: new Date(new Date().setHours(0, 0, 0, 0)),\n    },\n    validationSchema: validationSchema,\n    onSubmit: addTransfer,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Add new transfer</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <Grid container align=\"center\" direction=\"row\">\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"fromAccount\">\n                From:\n              </InputLabel>\n              <Select\n                id=\"fromAccount\"\n                name=\"fromAccount\"\n                fullWidth\n                value={formik.values.fromAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.fromAccount &&\n                  Boolean(formik.errors.fromAccount)\n                }\n              >\n                {accountList\n                  .filter((account) => account.id !== 0)\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n            <Grid item xs={2} style={{ paddingTop: 20 }}>\n              <ArrowRightAltIcon />\n            </Grid>\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"toAccount\">\n                To:\n              </InputLabel>\n              <Select\n                fullWidth\n                id=\"toAccount\"\n                name=\"toAccount\"\n                value={formik.values.toAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.toAccount && Boolean(formik.errors.toAccount)\n                }\n              >\n                {accountList\n                  .filter(\n                    (account) =>\n                      ![formik.values.fromAccount, 0].includes(account.id)\n                  )\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n          </Grid>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  tabName: {\n    color: theme.green,\n  },\n  infoBox: {\n    border: \"2px solid\",\n    borderRadius: 10,\n    padding: 15,\n    borderColor: theme.green,\n    backgroundColor: theme.white,\n  },\n}));\n\nconst goToAccounts = () => {};\n\nexport default function NoAccount() {\n  const classes = useStyles();\n\n  return (\n    <Box mt={2} className={classes.infoBox}>\n      <InfoIcon fontSize=\"large\" className={classes.tabName} />\n      <Typography variant=\"h6\">\n        Please add your first account in{\" \"}\n        <Link className={classes.tabName} onClick={goToAccounts()}>\n          Manage accounts\n        </Link>{\" \"}\n        tab\n      </Typography>\n    </Box>\n  );\n}\n","import {\n  Box,\n  Container,\n  Grid,\n  IconButton,\n  MenuItem,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport DatePicker from \"../components/account/DatePicker\";\nimport RemoveCircleOutlineOutlinedIcon from \"@material-ui/icons/RemoveCircleOutlineOutlined\";\nimport LoopRoundedIcon from \"@material-ui/icons/LoopRounded\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport EventIcon from \"@material-ui/icons/Event\";\nimport AddCircleOutlineRoundedIcon from \"@material-ui/icons/AddCircleOutlineRounded\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport AddTransactionDialog from \"../components/account/AddTransactionDialog\";\nimport { useAccountList } from \"../providers/AccountListProvider\";\nimport TransactionList from \"../components/account/TransactionList\";\nimport { useTransactionList } from \"../providers/TransactionListProvider\";\nimport Loading from \"../components/core/Loading\";\nimport Balance from \"../components/account/Balance\";\nimport AddTransferDialog from \"../components/account/AddTransferDialog\";\nimport NoAccount from \"../components/account/NoAccount\";\n\nconst useStyles = makeStyles((theme) => ({\n  incomeButton: {\n    color: theme.green,\n  },\n  outcomeButton: {\n    color: theme.red,\n  },\n  sortButton: {\n    color: theme.black,\n    backgroundColor: theme.white,\n  },\n  accountPicker: {\n    maxHeight: 50,\n    minWidth: 162,\n    maxWidth: 162,\n    marginLeft: -20,\n    marginRight: 20,\n    backgroundColor: theme.white,\n  },\n}));\n\nexport default function Account() {\n  const [date, setDate] = useState(new Date());\n  const [periodOfTime, setPeriodOfTime] = useState(\"M\");\n  const [addTransactionOpen, setAddTransactionOpen] = useState(false);\n  const [addTransferOpen, setAddTransferOpen] = useState(false);\n  const [transactionType, setTransactionType] = useState(\"INCOME\");\n  const { accountList, selectedAccount, setSelectedById } = useAccountList();\n  const { transactionList, isTransactionLoading } = useTransactionList();\n  const [sortBy, setSortBy] = useState(\"category\");\n  const classes = useStyles();\n\n  const addTransaction = (transactionType) => {\n    setTransactionType(transactionType);\n    setAddTransactionOpen(true);\n  };\n\n  const handleSelectedAccountChange = (event) => {\n    setSelectedById(event.target.value);\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      {!selectedAccount ? (\n        <Loading />\n      ) : (\n        <Box display=\"flex\">\n          <Select\n            variant=\"outlined\"\n            className={classes.accountPicker}\n            value={selectedAccount.id}\n            onChange={handleSelectedAccountChange}\n          >\n            {accountList.map((account) => (\n              <MenuItem key={account.id} value={account.id}>\n                {account.name}\n              </MenuItem>\n            ))}\n          </Select>\n          <Box>\n            <Grid container align=\"center\" direction=\"column\" spacing={2}>\n              <Grid item>\n                <DatePicker\n                  date={date}\n                  setDate={setDate}\n                  periodOfTime={periodOfTime}\n                  setPeriodOfTime={setPeriodOfTime}\n                />\n              </Grid>\n              {isTransactionLoading ? (\n                <Loading />\n              ) : accountList.length === 1 ? (\n                <NoAccount />\n              ) : (\n                <>\n                  <Grid item>\n                    <Balance\n                      account={selectedAccount}\n                      transactionList={transactionList}\n                      date={date}\n                      periodOfTime={periodOfTime}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Box mt={1}>\n                      <IconButton\n                        className={classes.incomeButton}\n                        onClick={() => addTransaction(\"INCOME\")}\n                      >\n                        <AddCircleOutlineRoundedIcon fontSize=\"large\" />\n                      </IconButton>\n                      <IconButton\n                        color=\"inherit\"\n                        onClick={() => setAddTransferOpen(true)}\n                      >\n                        <LoopRoundedIcon fontSize=\"large\" />\n                      </IconButton>\n                      <IconButton\n                        className={classes.outcomeButton}\n                        onClick={() => addTransaction(\"OUTCOME\")}\n                      >\n                        <RemoveCircleOutlineOutlinedIcon fontSize=\"large\" />\n                      </IconButton>\n                    </Box>\n                  </Grid>\n                  <Grid item>\n                    <Box\n                      display=\"flex\"\n                      flexDirection=\"row\"\n                      justifyContent=\"flex-end\"\n                      alignItems=\"center\"\n                    >\n                      <Typography>Group by {sortBy}&nbsp;</Typography>\n                      <IconButton\n                        className={classes.sortButton}\n                        size=\"small\"\n                        onClick={() =>\n                          setSortBy(sortBy === \"date\" ? \"category\" : \"date\")\n                        }\n                      >\n                        {sortBy === \"date\" ? <FolderOpenIcon /> : <EventIcon />}\n                      </IconButton>\n                    </Box>\n                    <TransactionList\n                      sortBy={sortBy}\n                      transactionList={transactionList}\n                      date={date}\n                      periodOfTime={periodOfTime}\n                    />\n                  </Grid>{\" \"}\n                </>\n              )}\n            </Grid>\n          </Box>\n          <AddTransactionDialog\n            open={addTransactionOpen}\n            setOpen={setAddTransactionOpen}\n            transactionType={transactionType}\n            accountList={accountList}\n            selectedAccount={selectedAccount}\n          />\n          <AddTransferDialog\n            open={addTransferOpen}\n            setOpen={setAddTransferOpen}\n            accountList={accountList}\n            selectedAccount={selectedAccount}\n          />\n        </Box>\n      )}\n    </Container>\n  );\n}\n","import { Typography } from \"@material-ui/core\";\n\nexport default function PageTitle({ title }) {\n  return (\n    <Typography variant=\"h4\" align=\"center\">\n      {title}\n    </Typography>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useAuth } from \"../../providers/AuthProvider\";\n\nconst validationSchema = yup.object({\n  name: yup.string(\"Enter account name\").required(\"Account name is required\"),\n  startBalance: yup\n    .number(\"Enter account start balance\")\n    .typeError(\"Start balance must be a number\")\n    .required(\"Start balance is required\"),\n});\n\nexport default function AddAcountDialog({ open, setOpen }) {\n  const { token } = useAuth();\n\n  const addAccount = async (values) => {\n    const { name, startBalance } = values;\n\n    const response = await axios({\n      method: \"post\",\n      url: \"api/account\",\n      data: {\n        name,\n        startBalance,\n        userId: token,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      startBalance: 0,\n    },\n    validationSchema: validationSchema,\n    onSubmit: addAccount,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Add account</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <DialogContentText>Enter account details</DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Account name\"\n            fullWidth\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"startBalance\"\n            label=\"Start balance\"\n            fullWidth\n            value={formik.values.startBalance}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.startBalance && Boolean(formik.errors.startBalance)\n            }\n            helperText={\n              formik.touched.startBalance && formik.errors.startBalance\n            }\n          />\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\n\nconst validationSchema = yup.object({\n  name: yup.string(\"Enter account name\").required(\"Account name is required\"),\n  startBalance: yup\n    .number(\"Enter account start balance\")\n    .typeError(\"Start balance must be a number\")\n    .required(\"Start balance is required\"),\n});\n\nexport default function ModifyAccountDialog({ open, setOpen, account }) {\n  const modifyAccount = async (values) => {\n    const { name, startBalance } = values;\n\n    const response = await axios({\n      method: \"put\",\n      url: `api/account/${account.id}`,\n      data: {\n        name,\n        startBalance,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: account ? account : { name: \"\", startBalance: \"\" },\n    validationSchema: validationSchema,\n    onSubmit: modifyAccount,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Modify account</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Account name\"\n            fullWidth\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"startBalance\"\n            label=\"Start balance balance\"\n            fullWidth\n            value={formik.values.startBalance}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.startBalance && Boolean(formik.errors.startBalance)\n            }\n            helperText={\n              formik.touched.startBalance && formik.errors.startBalance\n            }\n          />\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@material-ui/core\";\n\nexport default function ConfirmDialog({ open, setOpen, handleAction }) {\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Are you sure you want to delete this item?</DialogTitle>\n      <DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button color=\"primary\" onClick={handleAction}>\n            Delete\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Avatar,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\nconst useStyles = makeStyles((theme) => ({\n  accountAvatar: {\n    backgroundColor: theme.green,\n  },\n  accountItem: {\n    backgroundColor: theme.white,\n    borderRadius: 20,\n    marginBottom: 5,\n  },\n}));\n\nexport default function AccountItem({ account, handleModify, handleDelete }) {\n  const classes = useStyles();\n  return (\n    <ListItem key={account.id} className={classes.accountItem}>\n      <ListItemAvatar>\n        <Avatar className={classes.accountAvatar} variant=\"rounded\">\n          <AccountBalanceWalletIcon />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={account.name}\n        secondary={`Start balance: ${account.startBalance}`}\n      />\n      <ListItemSecondaryAction>\n        <IconButton\n          edge=\"end\"\n          aria-label=\"edit\"\n          onClick={() => handleModify(account)}\n        >\n          <SettingsIcon />\n        </IconButton>\n        <IconButton\n          edge=\"end\"\n          aria-label=\"delete\"\n          onClick={() => handleDelete(account)}\n        >\n          <DeleteIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n}\n","import { List } from \"@material-ui/core\";\nimport AccountItem from \"./AccountItem\";\n\nexport default function AccountList({\n  accountList,\n  setSelectedAccount,\n  setModifyAccountOpen,\n  setDeleteAccountOpen,\n}) {\n  const handleModify = (account) => {\n    setSelectedAccount(account);\n    setModifyAccountOpen(true);\n  };\n\n  const handleDelete = (account) => {\n    setSelectedAccount(account);\n    setDeleteAccountOpen(true);\n  };\n\n  return (\n    <List>\n      {accountList.map((account) => (\n        <AccountItem\n          key={account.id}\n          account={account}\n          handleModify={handleModify}\n          handleDelete={handleDelete}\n        />\n      ))}\n    </List>\n  );\n}\n","import { Button, Container, Grid } from \"@material-ui/core\";\nimport PageTitle from \"../components/core/PageTitle\";\nimport { useEffect, useState } from \"react\";\nimport AddAccountDialog from \"../components/manageAccount/AddAccountDialog\";\nimport ModifyAccountDialog from \"../components/manageAccount/ModifyAccountDialog\";\nimport axios from \"../axios-instance\";\nimport ConfirmDialog from \"../components/core/ConfirmDialog\";\nimport { useAccountList } from \"../providers/AccountListProvider\";\nimport AccountList from \"../components/manageAccount/AccountList\";\n\nexport default function ManageAccount() {\n  const [addAccountOpen, setAddAccountOpen] = useState(false);\n  const [modifyAccountOpen, setModifyAccountOpen] = useState(false);\n  const [deleteAccountOpen, setDeleteAccountOpen] = useState(false);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const { accountList, getAccountList } = useAccountList();\n\n  const deleteAccount = async (id) => {\n    const response = await axios({\n      method: \"delete\",\n      url: `api/account/${id}`,\n    });\n    if (response.status === 200) {\n      setDeleteAccountOpen(false);\n    }\n  };\n\n  useEffect(\n    () => getAccountList(),\n    // eslint-disable-next-line\n    [addAccountOpen, modifyAccountOpen, deleteAccountOpen]\n  );\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Grid container align=\"center\" direction=\"column\" spacing={3}>\n        <Grid item>\n          <PageTitle title=\"Manage accounts\" />\n        </Grid>\n        <Grid item>\n          <AccountList\n            accountList={accountList.filter((account) => account.id !== 0)}\n            setSelectedAccount={setSelectedAccount}\n            setModifyAccountOpen={setModifyAccountOpen}\n            setDeleteAccountOpen={setDeleteAccountOpen}\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            size=\"large\"\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => setAddAccountOpen(true)}\n          >\n            Add account\n          </Button>\n        </Grid>\n      </Grid>\n      <AddAccountDialog open={addAccountOpen} setOpen={setAddAccountOpen} />\n      <ModifyAccountDialog\n        open={modifyAccountOpen}\n        setOpen={setModifyAccountOpen}\n        account={selectedAccount}\n      />\n      <ConfirmDialog\n        open={deleteAccountOpen}\n        setOpen={setDeleteAccountOpen}\n        handleAction={() => deleteAccount(selectedAccount.id)}\n      />\n    </Container>\n  );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useState } from \"react\";\r\nimport HeadLayout from \"../components/core/layout/HeadLayout\";\r\nimport Account from \"./Account\";\r\nimport ManageAccount from \"./ManageAccount\";\r\nimport LocalAtmIcon from \"@material-ui/icons/LocalAtm\";\r\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\r\nimport AccountListProvider from \"../providers/AccountListProvider\";\r\nimport TransactionListProvider from \"../providers/TransactionListProvider\";\r\n\r\nconst pages = {\r\n  account: {\r\n    body: <Account />,\r\n    icon: <LocalAtmIcon />,\r\n    title: \"Account page\",\r\n  },\r\n  manageAccount: {\r\n    body: <ManageAccount />,\r\n    icon: <AccountBalanceWalletIcon />,\r\n    title: \"Manage accounts\",\r\n  },\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    marginTop: 60,\r\n  },\r\n}));\r\n\r\nexport default function Landing() {\r\n  const [activePage, setActivePage] = useState(\"account\");\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <HeadLayout\r\n        navItems={pages}\r\n        currentNavItem={activePage}\r\n        setCurrentNavItem={setActivePage}\r\n      />\r\n      <AccountListProvider>\r\n        <TransactionListProvider>\r\n          <main className={classes.content}>{pages[activePage].body}</main>\r\n        </TransactionListProvider>\r\n      </AccountListProvider>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport { useAuth } from \"./providers/AuthProvider\";\nimport Landing from \"./pages/Landing\";\nimport {\n  createMuiTheme,\n  CssBaseline,\n  MuiThemeProvider,\n} from \"@material-ui/core\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#85bb65\",\n    },\n    secondary: {\n      main: \"#cdb68e\",\n    },\n    background: {\n      default: \"#fafafa\",\n    },\n  },\n  white: \"#fff\",\n  black: \"#000\",\n  green: green[500],\n  red: red[500],\n});\n\nfunction App() {\n  const { token } = useAuth();\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Switch>\n        {token ? (\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        ) : (\n          <>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n            <Route path=\"/register\">\n              <Register />\n            </Route>\n            <Route strict exact path=\"/\">\n              <Redirect to=\"/login\" />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { AuthProvider } from \"./providers/AuthProvider\";\n\nReactDOM.render(\n  <Router>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}