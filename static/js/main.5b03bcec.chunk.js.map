{"version":3,"sources":["providers/AuthProvider.jsx","components/login/LoginTitle.jsx","components/login/LoginContainer.jsx","components/login/LoginCard.jsx","axios-instance.js","pages/Login.jsx","pages/Register.jsx","components/core/layout/LeftDrawer.jsx","components/core/layout/Nav.jsx","components/core/layout/HeadLayout.jsx","utils/dateUtil.js","components/account/DatePicker.jsx","providers/AccountListProvider.jsx","providers/TransactionListProvider.jsx","components/account/AddTransactionDialog.jsx","components/account/ModifyTransactionDialog.jsx","components/account/ModifyTransferDialog.jsx","utils/transactionUtil.js","components/account/TransactionItem.jsx","components/account/TransactionList.jsx","components/core/Loading.jsx","components/core/LabelledOutline.jsx","components/account/Balance.jsx","components/account/AddTransferDialog.jsx","components/account/NoAccount.jsx","components/account/AccountSelect.jsx","pages/Account.jsx","components/core/PageTitle.jsx","components/manageAccount/AddAccountDialog.jsx","components/manageAccount/ModifyAccountDialog.jsx","components/core/ConfirmDialog.jsx","components/manageAccount/AccountItem.jsx","components/manageAccount/AccountList.jsx","pages/ManageAccount.jsx","pages/AccountStats.jsx","pages/Landing.jsx","App.js","index.js"],"names":["AuthContext","createContext","token","AuthProvider","children","useState","setToken","registerSucess","setRegisterSuccess","history","useHistory","useEffect","tokenFromStorage","localStorage","getItem","Provider","value","logIn","setItem","push","logOut","removeItem","useAuth","useContext","LoginTitle","welcomeText","Box","mb","Typography","display","variant","align","color","LoginContainer","styled","Container","height","alignItems","justifyContent","LoginCard","Card","padding","width","minHeight","axios","create","baseURL","Login","errorMessage","setErrorMessage","doLogin","values","a","login","password","method","url","data","response","status","formik","useFormik","initialValues","onSubmit","CardContent","handleSubmit","Grid","container","direction","spacing","item","TextField","id","label","fullWidth","size","onChange","handleChange","type","Button","onClick","Snackbar","open","autoHideDuration","onClose","Alert","severity","validationSchema","yup","email","required","min","Register","doRegister","error","touched","Boolean","errors","helperText","useStyle","makeStyles","theme","drawer","flexShrink","whiteSpace","drawerOpen","transition","transitions","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","overflowX","breakpoints","up","toolbar","mixins","LeftDrawer","items","currentItem","setCurrentItem","classes","Drawer","className","clsx","paper","Divider","List","Object","entries","map","key","ListItem","button","selected","ListItemIcon","icon","ListItemText","primary","title","appBar","zIndex","appBarShift","marginLeft","menuButton","marginRight","logoutButton","Nav","handleDrawerOpen","handleDrawerClose","AppBar","position","Toolbar","IconButton","aria-label","edge","Fade","in","noWrap","HeadLayout","navItems","currentNavItem","setCurrentNavItem","setDrawerOpen","formatDate","date","periodOfTime","m","moment","startOf","format","clone","add","addToDate","toDate","filterTransactionsByDate","transactionList","filter","transaction","isSame","getPeriod","useStyles","dateBox","borderRadius","backgroundColor","datePicker","minWidth","DatePicker","setDate","setPeriodOfTime","isNextAvaible","setIsNextAvaible","Select","event","period","target","Date","MenuItem","justify","subtract","dateUtil","fontSize","disabled","AccountListContext","AccountListProvider","accountList","setAccountList","selectedAccount","setSelectedAccount","isAccountLoading","setIsAccountLoading","refreshKey","setRefreshKey","getAccountListAndSetSelected","getAccountList","setSelectedById","find","account","useAccountList","TransactionListContext","TransactionListProvider","setTransactionList","isTransactionLoading","setIsTransactionLoading","getTransactionList","undefined","transactionsResponse","incomeResponse","outcomeResponse","concat","i","transactionType","category","o","useTransactionList","typeError","positive","note","max","AddTransactionDialog","setOpen","addTransaction","accountId","oldKey","enableReinitialize","setHours","Dialog","DialogTitle","toLowerCase","DialogContent","name","margin","utils","DateFnsUtils","disableToolbar","maxDate","autoOk","KeyboardButtonProps","setFieldValue","DialogActions","ModifyTransactionDialog","modifyTransaction","deleteTransaction","ModifyTransferDialog","transfer","modifyTransfer","toAccount","fromAccount","toAccountId","fromAccountId","deleteTransfer","xs","InputLabel","htmlFor","style","paddingTop","includes","getIncome","getByTransactionType","getOutcome","transactionTypes","t","getTransactionSum","_","sumBy","getAccountBalance","startBalance","round","getIncomeSum","getOutcomeSum","getSum","sortGrouped","groupBy","grouped","orderBy","nested","transactionSubItem","textAlign","icnomeItem","green","white","marginBottom","outcomeItem","red","incomeAvatar","outcomeAvatar","incomeIcon","outcomeIcon","TransactionItem","header","sortBy","isDialogOpen","setIsDialogOpen","isTransferDialogOpen","setIsTransferDialogOpen","selectedTransaction","setSelectedTransaction","getSubField","ListItemAvatar","Avatar","secondary","length","Collapse","timeout","unmountOnExit","component","disablePadding","handleOpenDialog","TransactionList","getIcon","getHeader","transactionItem","spinner","Loading","CircularProgress","root","content","props","fontWeight","inputLabel","left","top","transform","LabelledOutline","labelWidth","setLabelWidth","labelRef","useRef","labelNode","ReactDOM","findDOMNode","current","offsetWidth","marginTop","ref","shrink","notched","BalanceBox","border","positiveBalance","negativeBalance","positiveBalanceBox","borderColor","negativeBalanceBox","Balance","filteredTransactionList","balance","AddTransferDialog","addTransfer","tabName","infoBox","NoAccount","mt","goToAccounts","AccountPicker","maxHeight","maxWidth","AccountSelect","incomeButton","outcomeButton","sortButton","black","accountPicker","Account","addTransactionOpen","setAddTransactionOpen","addTransferOpen","setAddTransferOpen","setTransactionType","setSortBy","flexDirection","PageTitle","AddAcountDialog","addAccount","userId","DialogContentText","autoFocus","ModifyAccountDialog","modifyAccount","ConfirmDialog","handleAction","accountAvatar","accountItem","AccountItem","isModifyDialogOpen","setIsModifyDialogOpen","isDeleteDialogOpen","setIsDeleteDialogOpen","deleteAccount","ListItemSecondaryAction","AccountList","ManageAccount","addAccountOpen","setAddAccountOpen","AccountStats","pages","body","manageAccount","accountStats","flexGrow","Landing","activePage","setActivePage","createMuiTheme","palette","main","background","default","App","CssBaseline","path","strict","exact","to","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b03bcec.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AuthContext = createContext({ token: null });\r\nconst AuthProvider = ({ children }) => {\r\n  const [token, setToken] = useState(\"\");\r\n  const [registerSucess, setRegisterSuccess] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const tokenFromStorage = localStorage.getItem(\"token\");\r\n    if (tokenFromStorage) setToken(tokenFromStorage);\r\n  }, []);\r\n\r\n  const logIn = (token) => {\r\n    localStorage.setItem(\"token\", token);\r\n    setToken(token);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const logOut = () => {\r\n    localStorage.removeItem(\"token\");\r\n    setToken(null);\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ token, logIn, logOut, registerSucess, setRegisterSuccess }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAuth = () => useContext(AuthContext);\r\n\r\nexport { AuthProvider, useAuth };\r\n","import { Box, Typography } from \"@material-ui/core\";\n\nexport default function LoginTitle({ welcomeText }) {\n  return (\n    <Box mb={4}>\n      <Typography display=\"inline\" variant=\"h4\" align=\"center\">\n        {welcomeText}&nbsp;\n      </Typography>\n      <Typography display=\"inline\" variant=\"h4\" color=\"primary\">\n        eWallet\n      </Typography>\n    </Box>\n  );\n}\n","import { styled } from \"@material-ui/styles\";\nimport { Container } from \"@material-ui/core\";\n\nexport const LoginContainer = styled(Container)({\n  height: \"100vh\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  display: \"flex\",\n});\n","import { styled } from \"@material-ui/styles\";\nimport { Card } from \"@material-ui/core\";\n\nexport const LoginCard = styled(Card)({\n  padding: \"20px 35px 20px 35px\",\n  width: 390,\n  minHeight: 408,\n});\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://ewallet-be.mybluemix.net/\",\n});\n","import { useAuth } from \"../providers/AuthProvider\";\r\nimport {\r\n  Button,\r\n  CardContent,\r\n  Grid,\r\n  TextField,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LoginTitle from \"../components/login/LoginTitle\";\r\nimport { LoginContainer } from \"../components/login/LoginContainer\";\r\nimport { LoginCard } from \"../components/login/LoginCard\";\r\nimport axios from \"../axios-instance\";\r\nimport { useFormik } from \"formik\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Login() {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const { logIn, registerSucess, setRegisterSuccess } = useAuth();\r\n  const history = useHistory();\r\n\r\n  const doLogin = async (values) => {\r\n    const { login, password } = values;\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: \"post\",\r\n        url: \"api/user/authenticate\",\r\n        data: {\r\n          login,\r\n          password,\r\n        },\r\n      });\r\n      if (response.status === 200) {\r\n        logIn(response.data);\r\n      }\r\n    } catch (err) {\r\n      if (err.response.status === 401)\r\n        setErrorMessage(\"Invalid username or password\");\r\n      else setErrorMessage(\"Could not login\");\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      login: \"\",\r\n      password: \"\",\r\n    },\r\n    onSubmit: doLogin,\r\n  });\r\n\r\n  return (\r\n    <LoginContainer>\r\n      <LoginCard>\r\n        <CardContent>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <Grid container align=\"center\" direction=\"column\" spacing={3}>\r\n              <Grid item>\r\n                <LoginTitle welcomeText=\"Log in to\" />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"login\"\r\n                  label=\"Login\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.login}\r\n                  onChange={formik.handleChange}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  label=\"Password\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  onChange={formik.handleChange}\r\n                  value={formik.values.password}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                >\r\n                  Login\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                  onClick={() => history.push(\"/register\")}\r\n                >\r\n                  No account? Register\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </CardContent>\r\n      </LoginCard>\r\n      <Snackbar\r\n        open={!!errorMessage}\r\n        autoHideDuration={7000}\r\n        onClose={() => setErrorMessage(\"\")}\r\n      >\r\n        <Alert severity=\"error\" onClose={() => setErrorMessage(\"\")}>\r\n          {errorMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar\r\n        open={!!registerSucess}\r\n        autoHideDuration={7000}\r\n        onClose={() => setRegisterSuccess(\"\")}\r\n      >\r\n        <Alert severity=\"success\" onClose={() => setRegisterSuccess(\"\")}>\r\n          {registerSucess}\r\n        </Alert>\r\n      </Snackbar>\r\n    </LoginContainer>\r\n  );\r\n}\r\n","import {\r\n  Button,\r\n  CardContent,\r\n  Grid,\r\n  Snackbar,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router\";\r\nimport { LoginContainer } from \"../components/login/LoginContainer\";\r\nimport { LoginCard } from \"../components/login/LoginCard\";\r\nimport LoginTitle from \"../components/login/LoginTitle\";\r\nimport axios from \"../axios-instance\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { useState } from \"react\";\r\nimport { useAuth } from \"../providers/AuthProvider\";\r\n\r\nconst validationSchema = yup.object({\r\n  email: yup\r\n    .string(\"Enter your email\")\r\n    .email(\"Enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  login: yup.string(\"Enter your login\").required(\"Login is required\"),\r\n  password: yup\r\n    .string(\"Enter your password\")\r\n    .min(5, \"Password should be of minimum 5 characters length\")\r\n    .required(\"Password is required\"),\r\n});\r\n\r\nexport default function Register() {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const { setRegisterSuccess } = useAuth();\r\n  const doRegister = async (values) => {\r\n    const { login, email, password } = values;\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: \"post\",\r\n        url: \"api/user/register\",\r\n        data: {\r\n          login,\r\n          email,\r\n          password,\r\n        },\r\n      });\r\n      if (response.status === 200) {\r\n        setRegisterSuccess(\"User registered successfully\");\r\n        history.push(\"login/\");\r\n      }\r\n    } catch (err) {\r\n      if (err.response.status === 400)\r\n        setErrorMessage(\"Login is already taken\");\r\n      else setErrorMessage(\"Could not register user\");\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      login: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: doRegister,\r\n  });\r\n\r\n  const history = useHistory();\r\n  return (\r\n    <LoginContainer>\r\n      <LoginCard>\r\n        <CardContent>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <Grid container align=\"center\" direction=\"column\" spacing={3}>\r\n              <Grid item>\r\n                <LoginTitle welcomeText=\"Register to\" />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"login\"\r\n                  label=\"Login\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.login}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.login && Boolean(formik.errors.login)}\r\n                  helperText={formik.touched.login && formik.errors.login}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"email\"\r\n                  label=\"Email\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.email}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.email && Boolean(formik.errors.email)}\r\n                  helperText={formik.touched.email && formik.errors.email}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  label=\"Password\"\r\n                  variant=\"outlined\"\r\n                  fullWidth={true}\r\n                  size=\"small\"\r\n                  value={formik.values.password}\r\n                  onChange={formik.handleChange}\r\n                  error={\r\n                    formik.touched.password && Boolean(formik.errors.password)\r\n                  }\r\n                  helperText={formik.touched.password && formik.errors.password}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                >\r\n                  Register\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  fullWidth={true}\r\n                  onClick={() => history.push(\"/login\")}\r\n                >\r\n                  Already have account? Log in\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </CardContent>\r\n      </LoginCard>\r\n      <Snackbar\r\n        open={!!errorMessage}\r\n        autoHideDuration={7000}\r\n        onClose={() => setErrorMessage(\"\")}\r\n      >\r\n        <Alert severity=\"error\" onClose={() => setErrorMessage(\"\")}>\r\n          {errorMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </LoginContainer>\r\n  );\r\n}\r\n","import {\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\n\nconst drawerWidth = 240;\n\nconst useStyle = makeStyles((theme) => ({\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n  },\n}));\n\nexport default function LeftDrawer({\n  drawerOpen,\n  items,\n  currentItem,\n  setCurrentItem,\n}) {\n  const classes = useStyle();\n\n  return (\n    <Drawer\n      variant=\"permanent\"\n      className={clsx(classes.drawer, {\n        [classes.drawerOpen]: drawerOpen,\n        [classes.drawerClose]: !drawerOpen,\n      })}\n      classes={{\n        paper: clsx({\n          [classes.drawerOpen]: drawerOpen,\n          [classes.drawerClose]: !drawerOpen,\n        }),\n      }}\n    >\n      <div className={classes.toolbar}>\n        <Typography variant=\"h6\" color=\"primary\">\n          eWallet\n        </Typography>\n      </div>\n      <Divider />\n      <List>\n        {Object.entries(items).map(([key, item]) => (\n          <ListItem\n            button\n            onClick={() => setCurrentItem(key)}\n            key={key}\n            selected={currentItem === key}\n          >\n            <ListItemIcon>{item.icon}</ListItemIcon>\n            <ListItemText primary={item.title} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n  );\n}\n","import {\n  AppBar,\n  Fade,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport { useAuth } from \"../../../providers/AuthProvider\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\n\nconst drawerWidth = 240;\n\nconst useStyle = makeStyles((theme) => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  logoutButton: {\n    marginLeft: \"auto\",\n  },\n}));\n\nexport default function Nav({\n  drawerOpen,\n  handleDrawerOpen,\n  handleDrawerClose,\n}) {\n  const classes = useStyle();\n  const { logOut } = useAuth();\n  return (\n    <AppBar\n      position=\"fixed\"\n      className={clsx(classes.appBar, {\n        [classes.appBarShift]: drawerOpen,\n      })}\n    >\n      <Toolbar>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={drawerOpen ? handleDrawerClose : handleDrawerOpen}\n          edge=\"start\"\n          className={classes.menuButton}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Fade in={!drawerOpen}>\n          <Typography variant=\"h6\" noWrap>\n            eWallet\n          </Typography>\n        </Fade>\n        <IconButton\n          color=\"inherit\"\n          className={classes.logoutButton}\n          onClick={logOut}\n        >\n          <ExitToAppIcon />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import { useState } from \"react\";\nimport LeftDrawer from \"./LeftDrawer\";\nimport Nav from \"./Nav\";\n\nexport default function HeadLayout({\n  navItems,\n  currentNavItem,\n  setCurrentNavItem,\n}) {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  const handleDrawerClose = () => {\n    setDrawerOpen(false);\n  };\n\n  const handleDrawerOpen = () => {\n    setDrawerOpen(true);\n  };\n\n  return (\n    <>\n      <Nav\n        drawerOpen={drawerOpen}\n        handleDrawerClose={handleDrawerClose}\n        handleDrawerOpen={handleDrawerOpen}\n      />\n      <LeftDrawer\n        drawerOpen={drawerOpen}\n        items={navItems}\n        currentItem={currentNavItem}\n        setCurrentItem={setCurrentNavItem}\n      />\n    </>\n  );\n}\n","import moment from \"moment\";\n\nconst getPeriod = (periodOfTime) => {\n  if (periodOfTime === \"w\") return \"isoWeek\";\n  if (periodOfTime === \"M\") return \"month\";\n  return \"year\";\n};\n\nexport const formatDate = (date, periodOfTime) => {\n  let m = moment(date);\n  if (periodOfTime === \"w\")\n    return (\n      m.startOf(\"isoweek\").format(\"MMMM Do\") +\n      \" - \" +\n      m.clone().startOf(\"isoweek\").add(6, \"d\").format(\"MMMM Do[, ]YYYY\")\n    );\n  if (periodOfTime === \"M\") return m.format(\"MMMM[, ]YYYY\");\n  if (periodOfTime === \"y\") return m.format(\"YYYY\");\n};\n\nexport const format = (date) => moment(date).format(\"dddd, MMMM Do YYYY\");\n\nexport const addToDate = (date, periodOfTime) => {\n  var m = moment(date);\n\n  return periodOfTime === \"d\"\n    ? m.add(7, periodOfTime).toDate()\n    : m.add(1, periodOfTime).toDate();\n};\n\nexport const substractFromDate = (date, periodOfTime) => {\n  var m = moment(date);\n\n  return periodOfTime === \"d\"\n    ? m.subtract(7, periodOfTime).toDate()\n    : m.subtract(1, periodOfTime).toDate();\n};\n\nexport const isNextAvaible = (date, periodOfTime) =>\n  moment(new Date()).isSame(moment(addToDate(date, periodOfTime)), \"day\");\n\nexport const filterTransactionsByDate = (transactionList, date, periodOfTime) =>\n  transactionList.filter((transaction) =>\n    moment(transaction.date).isSame(moment(date), getPeriod(periodOfTime))\n  );\n","import {\n  Box,\n  Grid,\n  IconButton,\n  MenuItem,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { useState } from \"react\";\nimport * as dateUtil from \"../../utils/dateUtil\";\n\nconst useStyles = makeStyles(() => ({\n  dateBox: {\n    borderRadius: 20,\n    display: \"inline-box\",\n    padding: \"10px 20px 10px 20px\",\n    backgroundColor: \"#fff\",\n    width: 410,\n    // eslint-disable-next-line\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  datePicker: {\n    minWidth: 120,\n  },\n}));\n\nexport default function DatePicker({\n  date,\n  setDate,\n  periodOfTime,\n  setPeriodOfTime,\n}) {\n  const [isNextAvaible, setIsNextAvaible] = useState(false);\n  const classes = useStyles();\n\n  const nextDate = () => {\n    setDate(dateUtil.addToDate(date, periodOfTime));\n    if (dateUtil.isNextAvaible(date, periodOfTime)) setIsNextAvaible(false);\n  };\n\n  const prevDate = () => {\n    setDate(dateUtil.substractFromDate(date, periodOfTime));\n    setIsNextAvaible(true);\n  };\n\n  const handlePeriodOfTimeChange = (event) => {\n    const period = event.target.value;\n    setPeriodOfTime(period);\n    setIsNextAvaible(false);\n    setDate(new Date());\n  };\n\n  return (\n    <Grid container direction=\"column\" spacing={1}>\n      <Grid item>\n        <Select\n          id=\"period-of-time\"\n          value={periodOfTime}\n          onChange={handlePeriodOfTimeChange}\n          className={classes.datePicker}\n        >\n          <MenuItem value={\"w\"}>Week</MenuItem>\n          <MenuItem value={\"M\"}>Month</MenuItem>\n          <MenuItem value={\"y\"}>Year</MenuItem>\n        </Select>\n      </Grid>\n      <Grid item>\n        <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\n          <IconButton color=\"inherit\" onClick={prevDate}>\n            <ChevronLeftIcon fontSize=\"large\" />\n          </IconButton>\n          <Box className={classes.dateBox}>\n            <Typography variant=\"h6\">\n              {dateUtil.formatDate(date, periodOfTime)}\n            </Typography>\n          </Box>\n          <IconButton\n            color=\"inherit\"\n            onClick={nextDate}\n            disabled={!isNextAvaible}\n          >\n            <ChevronRightIcon fontSize=\"large\" />\n          </IconButton>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"../axios-instance\";\nimport { useAuth } from \"./AuthProvider\";\n\nconst AccountListContext = createContext();\nexport default function AccountListProvider({ children }) {\n  const [accountList, setAccountList] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [isAccountLoading, setIsAccountLoading] = useState(false);\n  const [refreshKey, setRefreshKey] = useState(0);\n  const { token } = useAuth();\n\n  const getAccountListAndSetSelected = async () => {\n    setIsAccountLoading(true);\n    const response = await axios({\n      method: \"get\",\n      url: `api/account/${token}`,\n    });\n    if (response.status === 200) {\n      setAccountList(response.data);\n      setSelectedAccount(response.data[0]);\n      setIsAccountLoading(false);\n    }\n  };\n\n  const getAccountList = async () => {\n    setIsAccountLoading(true);\n    const response = await axios({\n      method: \"get\",\n      url: `api/account/${token}`,\n    });\n    if (response.status === 200) {\n      setAccountList(response.data);\n      setIsAccountLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getAccountListAndSetSelected();\n    // eslint-disable-next-line\n  }, []);\n\n  // eslint-disable-next-line\n  useEffect(() => getAccountList(), [refreshKey]);\n\n  const setSelectedById = (id) => {\n    setSelectedAccount(accountList.find((account) => account.id === id));\n  };\n\n  return (\n    <AccountListContext.Provider\n      value={{\n        accountList,\n        selectedAccount,\n        setSelectedById,\n        setRefreshKey,\n        isAccountLoading,\n      }}\n    >\n      {children}\n    </AccountListContext.Provider>\n  );\n}\n\nexport const useAccountList = () => useContext(AccountListContext);\n","import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useAccountList } from \"./AccountListProvider\";\nimport axios from \"../axios-instance\";\nimport { useAuth } from \"./AuthProvider\";\n\nconst TransactionListContext = createContext();\nexport default function TransactionListProvider({ children }) {\n  const [transactionList, setTransactionList] = useState([]);\n  const [isTransactionLoading, setIsTransactionLoading] = useState(false);\n  const [refreshKey, setRefreshKey] = useState(0);\n  const { selectedAccount } = useAccountList();\n  const { token } = useAuth();\n\n  const getTransactionList = async () => {\n    if (selectedAccount === undefined || selectedAccount === null) return;\n    setIsTransactionLoading(true);\n    const transactionsResponse = await axios({\n      method: \"get\",\n      url: `api/transaction/${token}/${selectedAccount?.id}`,\n    });\n\n    if (selectedAccount.id === 0 && transactionsResponse.status === 200) {\n      setTransactionList(transactionsResponse.data);\n      setIsTransactionLoading(false);\n      return;\n    }\n\n    const incomeResponse = await axios({\n      method: \"get\",\n      url: `api/transfer/to/${selectedAccount.id}`,\n    });\n\n    const outcomeResponse = await axios({\n      method: \"get\",\n      url: `api/transfer/from/${selectedAccount.id}`,\n    });\n\n    if (\n      transactionsResponse.status === 200 &&\n      incomeResponse.status === 200 &&\n      outcomeResponse.status === 200\n    ) {\n      setTransactionList(\n        transactionsResponse.data.concat(\n          incomeResponse.data.map((i) => {\n            i.transactionType = \"TRANSFER-INCOME\";\n            i.category = \"Transfer\";\n            return i;\n          }),\n          outcomeResponse.data.map((o) => {\n            o.transactionType = \"TRANSFER-OUTCOME\";\n            o.category = \"Transfer\";\n            return o;\n          })\n        )\n      );\n      setIsTransactionLoading(false);\n    }\n  };\n\n  useEffect(\n    () => getTransactionList(),\n    // eslint-disable-next-line\n    [selectedAccount, refreshKey]\n  );\n\n  return (\n    <TransactionListContext.Provider\n      value={{\n        transactionList,\n        isTransactionLoading,\n        setRefreshKey,\n      }}\n    >\n      {children}\n    </TransactionListContext.Provider>\n  );\n}\n\nexport const useTransactionList = () => useContext(TransactionListContext);\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  category: yup.string(\"Enter category\").required(\"Category is required\"),\n  date: yup\n    .date(\"Enter date\")\n    .typeError(\"Enter date with valid format (dd/mm/yyyy)\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function AddTransactionDialog({\n  open,\n  setOpen,\n  transactionType,\n}) {\n  const { setRefreshKey } = useTransactionList();\n  const { accountList, selectedAccount } = useAccountList();\n\n  const addTransaction = async (values) => {\n    const { account, value, note, category, date } = values;\n    const response = await axios({\n      method: \"post\",\n      url: \"api/transaction\",\n      data: {\n        accountId: account,\n        value,\n        note,\n        category,\n        date,\n        transactionType,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      account:\n        selectedAccount?.id !== 0 ? selectedAccount.id : accountList[0].id,\n      value: 0,\n      note: \"\",\n      category: \"\",\n      date: new Date(new Date().setHours(0, 0, 0, 0)),\n    },\n    validationSchema: validationSchema,\n    onSubmit: addTransaction,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Add new {transactionType.toLowerCase()}</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <Select\n            id=\"account\"\n            name=\"account\"\n            value={formik.values.account}\n            fullWidth\n            onChange={formik.handleChange}\n            error={formik.touched.account && Boolean(formik.errors.account)}\n          >\n            {accountList\n              .filter((account) => account.id !== 0)\n              .map((account) => (\n                <MenuItem key={account.id} value={account.id}>\n                  {account.name}\n                </MenuItem>\n              ))}\n          </Select>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"category\"\n            label=\"Category\"\n            fullWidth\n            value={formik.values.category}\n            onChange={formik.handleChange}\n            error={formik.touched.category && Boolean(formik.errors.category)}\n            helperText={formik.touched.category && formik.errors.category}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  category: yup.string(\"Enter category\").required(\"Category is required\"),\n  date: yup\n    .date(\"Enter date\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function ModifyTransactionDialog({\n  open,\n  setOpen,\n  transaction,\n}) {\n  const { setRefreshKey } = useTransactionList();\n\n  const modifyTransaction = async (values) => {\n    const { value, note, category, date } = values;\n\n    const response = await axios({\n      method: \"put\",\n      url: `/api/transaction/${transaction.id}`,\n      data: {\n        value,\n        note,\n        category,\n        date,\n      },\n    });\n\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const deleteTransaction = async () => {\n    const response = await axios({\n      method: \"delete\",\n      url: `/api/transaction/${transaction.id}`,\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: transaction ? transaction : {},\n    validationSchema: validationSchema,\n    onSubmit: modifyTransaction,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Modify transaction</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"category\"\n            label=\"Category\"\n            fullWidth\n            value={formik.values.category}\n            onChange={formik.handleChange}\n            error={formik.touched.category && Boolean(formik.errors.category)}\n            helperText={formik.touched.category && formik.errors.category}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={deleteTransaction}\n            >\n              Delete\n            </Button>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  date: yup\n    .date(\"Enter date\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function ModifyTransferDialog({ open, setOpen, transfer }) {\n  const { setRefreshKey } = useTransactionList();\n  const { accountList } = useAccountList();\n\n  const modifyTransfer = async (values) => {\n    const { toAccount, fromAccount, value, note, date } = values;\n    const response = await axios({\n      method: \"put\",\n      url: `api/transfer/${transfer.id}`,\n      data: {\n        toAccountId: toAccount,\n        fromAccountId: fromAccount,\n        value,\n        note,\n        date,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const deleteTransfer = async () => {\n    const response = await axios({\n      method: \"delete\",\n      url: `/api/transfer/${transfer.id}`,\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: transfer\n      ? {\n          fromAccount: transfer.fromAccountId,\n          toAccount: transfer.toAccountId,\n          value: transfer.value,\n          note: transfer.note,\n          date: transfer.date,\n        }\n      : {},\n    validationSchema: validationSchema,\n    onSubmit: modifyTransfer,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Modify transfer</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <Grid container align=\"center\" direction=\"row\">\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"fromAccount\">\n                From:\n              </InputLabel>\n              <Select\n                id=\"fromAccount\"\n                name=\"fromAccount\"\n                fullWidth\n                value={formik.values.fromAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.fromAccount &&\n                  Boolean(formik.errors.fromAccount)\n                }\n              >\n                {accountList\n                  .filter((account) => account.id !== 0)\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n            <Grid item xs={2} style={{ paddingTop: 20 }}>\n              <ArrowRightAltIcon />\n            </Grid>\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"toAccount\">\n                To:\n              </InputLabel>\n              <Select\n                fullWidth\n                id=\"toAccount\"\n                name=\"toAccount\"\n                value={formik.values.toAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.toAccount && Boolean(formik.errors.toAccount)\n                }\n              >\n                {accountList\n                  .filter(\n                    (account) =>\n                      ![formik.values.fromAccount, 0].includes(account.id)\n                  )\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n          </Grid>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={deleteTransfer}\n            >\n              Delete\n            </Button>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import _ from \"lodash\";\n\nexport const getIncome = (transactionList) =>\n  getByTransactionType(transactionList, [\"INCOME\", \"TRANSFER-INCOME\"]);\n\nexport const getOutcome = (transactionList) =>\n  getByTransactionType(transactionList, [\"OUTCOME\", \"TRANSFER-OUTCOME\"]);\n\nconst getByTransactionType = (transactionList, transactionTypes) =>\n  transactionList.filter((t) => transactionTypes.includes(t.transactionType));\n\nconst getTransactionSum = (transactionList) =>\n  _.sumBy(getIncome(transactionList), \"value\") -\n  _.sumBy(getOutcome(transactionList), \"value\");\n\nexport const getAccountBalance = (startBalance, transactionList) =>\n  _.round(startBalance + getTransactionSum(transactionList), 2);\n\nexport const getIncomeSum = (transactionList) =>\n  _.round(getTransactionSum(getIncome(transactionList)), 2);\n\nexport const getOutcomeSum = (transactionList) =>\n  -_.round(getTransactionSum(getOutcome(transactionList)), 2);\n\nexport const getSum = (transactionList) =>\n  _.round(getTransactionSum(transactionList), 2);\n\nexport const sortGrouped = (transactionList, groupBy) => {\n  const grouped = _.orderBy(\n    _.groupBy(transactionList, groupBy),\n    [(t) => _.sumBy(t, \"value\")],\n    \"desc\"\n  );\n  return _.map(grouped, (t) => _.orderBy(t, \"value\", \"desc\"));\n};\n","import {\n  Avatar,\n  Collapse,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport ModifyTransactionDialog from \"./ModifyTransactionDialog\";\nimport ModifyTransferDialog from \"./ModifyTransferDialog\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\nimport { getSum } from \"../../utils/transactionUtil\";\nimport { format } from \"../../utils/dateUtil\";\n\nconst useStyles = makeStyles((theme) => ({\n  nested: {\n    marginLeft: theme.spacing(4),\n    borderRadius: 50,\n    width: 450,\n  },\n  transactionSubItem: {\n    textAlign: \"right\",\n  },\n  icnomeItem: {\n    color: theme.green,\n    backgroundColor: theme.white,\n    borderRadius: 20,\n    marginBottom: 5,\n  },\n  outcomeItem: {\n    color: theme.red,\n    backgroundColor: theme.white,\n    borderRadius: 20,\n    marginBottom: 5,\n  },\n  incomeAvatar: {\n    backgroundColor: theme.green,\n  },\n  outcomeAvatar: {\n    backgroundColor: theme.red,\n  },\n  incomeIcon: {\n    color: theme.green,\n  },\n  outcomeIcon: {\n    color: theme.red,\n  },\n}));\n\nexport default function TransactionItem({\n  header,\n  icon,\n  transactionList,\n  sortBy,\n  type,\n}) {\n  const [open, setOpen] = useState(false);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isTransferDialogOpen, setIsTransferDialogOpen] = useState(false);\n  const [selectedTransaction, setSelectedTransaction] = useState(null);\n  const { accountList } = useAccountList();\n  const classes = useStyles();\n\n  const getSubField = (transaction) => {\n    if (sortBy === \"category\") return format(transaction.date);\n    return transaction.category;\n  };\n\n  const handleOpenDialog = (transaction) => {\n    setSelectedTransaction(transaction);\n    if ([\"INCOME\", \"OUTCOME\"].includes(transaction.transactionType))\n      setIsDialogOpen(true);\n    else setIsTransferDialogOpen(true);\n  };\n\n  return (\n    <>\n      <ListItem\n        key={header + type}\n        className={type === \"INCOME\" ? classes.icnomeItem : classes.outcomeItem}\n        button\n        onClick={() => setOpen(!open)}\n      >\n        <ListItemAvatar>\n          <Avatar\n            className={\n              type === \"INCOME\" ? classes.incomeAvatar : classes.outcomeAvatar\n            }\n            variant=\"rounded\"\n          >\n            {icon}\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText\n          primary={header}\n          secondary={`Transactions: ${transactionList?.length}`}\n        />\n        <ListItemText\n          className={classes.transactionSubItem}\n          primary={`${getSum(transactionList)} zł`}\n        />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {transactionList.map((transaction) => (\n            <ListItem\n              key={transaction.id}\n              className={classes.nested}\n              button\n              onClick={() => {\n                handleOpenDialog(transaction);\n              }}\n            >\n              <ListItemIcon>\n                <FiberManualRecordIcon\n                  fontSize=\"small\"\n                  className={\n                    type === \"INCOME\" ? classes.incomeIcon : classes.outcomeIcon\n                  }\n                />\n              </ListItemIcon>\n              <ListItemText\n                primary={`${transaction.value} zł`}\n                secondary={transaction.note}\n              />\n              <ListItemText\n                className={classes.transactionSubItem}\n                secondary={getSubField(transaction)}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </Collapse>\n      <ModifyTransactionDialog\n        open={isDialogOpen}\n        setOpen={setIsDialogOpen}\n        transaction={selectedTransaction}\n      />\n      <ModifyTransferDialog\n        open={isTransferDialogOpen}\n        setOpen={setIsTransferDialogOpen}\n        transfer={selectedTransaction}\n        accountList={accountList}\n      />\n    </>\n  );\n}\n","import { List } from \"@material-ui/core\";\nimport TransactionItem from \"./TransactionItem\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport EventIcon from \"@material-ui/icons/Event\";\nimport { filterTransactionsByDate, format } from \"../../utils/dateUtil\";\nimport {\n  getIncome,\n  getOutcome,\n  sortGrouped,\n} from \"../../utils/transactionUtil\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\n\nexport default function TransactionList({ sortBy, date, periodOfTime }) {\n  const { transactionList } = useTransactionList();\n\n  const getIcon = () =>\n    sortBy === \"category\" ? <FolderOpenIcon /> : <EventIcon />;\n\n  const getHeader = (transactionItem) =>\n    sortBy === \"date\"\n      ? format(transactionItem[0].date)\n      : transactionItem[0].category;\n\n  return (\n    <List>\n      {sortGrouped(\n        filterTransactionsByDate(\n          getIncome(transactionList),\n          date,\n          periodOfTime\n        ),\n        sortBy\n      ).map((transactionItem) => (\n        <TransactionItem\n          key={transactionItem[0][sortBy] + \"INCOME\"}\n          type=\"INCOME\"\n          icon={getIcon()}\n          transactionList={transactionItem}\n          sortBy={sortBy}\n          header={getHeader(transactionItem)}\n        />\n      ))}\n      {sortGrouped(\n        filterTransactionsByDate(\n          getOutcome(transactionList),\n          date,\n          periodOfTime\n        ),\n        sortBy\n      ).map((transactionItem) => (\n        <TransactionItem\n          key={transactionItem[0][sortBy] + \"OUTCOME\"}\n          type=\"OUTCOME\"\n          icon={getIcon()}\n          transactionList={transactionItem}\n          sortBy={sortBy}\n          header={getHeader(transactionItem)}\n        />\n      ))}\n    </List>\n  );\n}\n","import { Box, CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyle = makeStyles((theme) => ({\n  spinner: {\n    height: \"40vh\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    display: \"flex\",\n  },\n}));\n\nexport default function Loading() {\n  const classes = useStyle();\n\n  return (\n    <Box className={classes.spinner}>\n      <CircularProgress />\n    </Box>\n  );\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport NotchedOutline from \"@material-ui/core/OutlinedInput/NotchedOutline\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  content: (props) => ({\n    padding: \"15px 14px\",\n    borderRadius: 10,\n    width: 195,\n    height: 50,\n    fontWeight: \"bold\",\n    backgroundColor: theme.white,\n    color: props.color,\n  }),\n  inputLabel: {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    transform: \"translate(0, 24px) scale(1)\",\n  },\n}));\n\nexport default function LabelledOutline({ id, label, children, color }) {\n  const [labelWidth, setLabelWidth] = useState(0);\n  const labelRef = useRef(null);\n  const classes = useStyles({ color: color });\n\n  useEffect(() => {\n    const labelNode = ReactDOM.findDOMNode(labelRef.current);\n    setLabelWidth(labelNode != null ? labelNode.offsetWidth : 0);\n  }, [label]);\n\n  return (\n    <div style={{ position: \"relative\", marginTop: \"8px\" }}>\n      <InputLabel\n        ref={labelRef}\n        htmlFor={id}\n        variant=\"outlined\"\n        className={classes.inputLabel}\n        shrink\n      >\n        {label}\n      </InputLabel>\n      <div className={classes.root}>\n        <div id={id} className={classes.content}>\n          {children}\n          <NotchedOutline notched labelWidth={labelWidth} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { Box, Grid, makeStyles, styled } from \"@material-ui/core\";\nimport * as balance from \"../../utils/transactionUtil\";\nimport { filterTransactionsByDate } from \"../../utils/dateUtil\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\nimport LabelledOutline from \"../core/LabelledOutline\";\n\nconst BalanceBox = styled(Box)({\n  border: \"2px solid\",\n  borderRadius: 10,\n  padding: 10,\n  width: 195,\n  fontWeight: \"bold\",\n  backgroundColor: \"#fff\",\n});\n\nconst useStyles = makeStyles((theme) => ({\n  positiveBalance: {\n    color: theme.green,\n  },\n  negativeBalance: {\n    color: theme.red,\n  },\n  positiveBalanceBox: {\n    borderColor: theme.green,\n  },\n  negativeBalanceBox: {\n    borderColor: theme.red,\n  },\n}));\n\nexport default function Balance({ date, periodOfTime }) {\n  const classes = useStyles();\n  const { transactionList } = useTransactionList();\n  const { selectedAccount } = useAccountList();\n\n  const filteredTransactionList = filterTransactionsByDate(\n    transactionList,\n    date,\n    periodOfTime\n  );\n\n  return (\n    <Box>\n      <Grid container alignItems=\"center\" direction=\"column\" spacing={1}>\n        <Grid item>\n          <Grid container spacing={2}>\n            <Grid item>\n              <BalanceBox\n                className={`${classes.positiveBalanceBox} ${classes.positiveBalance}`}\n              >\n                {balance.getIncomeSum(filteredTransactionList)} zł\n              </BalanceBox>\n            </Grid>\n            <Grid item>\n              <BalanceBox\n                className={`${classes.negativeBalanceBox} ${classes.negativeBalance}`}\n              >\n                {balance.getOutcomeSum(filteredTransactionList)} zł\n              </BalanceBox>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <Grid container spacing={2}>\n            <Grid item>\n              <LabelledOutline\n                id=\"monthly\"\n                label=\"Monthly\"\n                color={\n                  balance.getSum(filteredTransactionList) > 0 ? \"green\" : \"red\"\n                }\n              >\n                {balance.getSum(filteredTransactionList)} zł\n              </LabelledOutline>\n            </Grid>\n            <Grid item>\n              <LabelledOutline\n                id=\"account\"\n                label=\"Account\"\n                color={\n                  balance.getAccountBalance(\n                    selectedAccount.startBalance,\n                    transactionList\n                  ) > 0\n                    ? \"green\"\n                    : \"red\"\n                }\n              >\n                {balance.getAccountBalance(\n                  selectedAccount.startBalance,\n                  transactionList\n                )}{\" \"}\n                zł\n              </LabelledOutline>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useTransactionList } from \"../../providers/TransactionListProvider\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst validationSchema = yup.object({\n  value: yup\n    .number()\n    .typeError(\"Value must be a number\")\n    .positive(\"Value must be grater than zero\")\n    .required(\"Value is required\"),\n  note: yup.string(\"Enter note\"),\n  date: yup\n    .date(\"Enter date\")\n    .max(new Date(), \"Date cannot be in the future\")\n    .required(\"Date is required\"),\n});\n\nexport default function AddTransferDialog({ open, setOpen }) {\n  const { setRefreshKey } = useTransactionList();\n  const { accountList, selectedAccount } = useAccountList();\n\n  const addTransfer = async (values) => {\n    const { toAccount, fromAccount, value, note, date } = values;\n    const response = await axios({\n      method: \"post\",\n      url: \"api/transfer\",\n      data: {\n        toAccountId: toAccount,\n        fromAccountId: fromAccount,\n        value,\n        note,\n        date,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      fromAccount:\n        selectedAccount.id !== 0 ? selectedAccount.id : accountList[0].id,\n      toAccount: accountList[1]?.id,\n      value: 0,\n      note: \"\",\n      date: new Date(new Date().setHours(0, 0, 0, 0)),\n    },\n    validationSchema: validationSchema,\n    onSubmit: addTransfer,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Add new transfer</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <Grid container align=\"center\" direction=\"row\">\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"fromAccount\">\n                From:\n              </InputLabel>\n              <Select\n                id=\"fromAccount\"\n                name=\"fromAccount\"\n                fullWidth\n                value={formik.values.fromAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.fromAccount &&\n                  Boolean(formik.errors.fromAccount)\n                }\n              >\n                {accountList\n                  .filter((account) => account.id !== 0)\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n            <Grid item xs={2} style={{ paddingTop: 20 }}>\n              <ArrowRightAltIcon />\n            </Grid>\n            <Grid item xs={5}>\n              <InputLabel align=\"left\" htmlFor=\"toAccount\">\n                To:\n              </InputLabel>\n              <Select\n                fullWidth\n                id=\"toAccount\"\n                name=\"toAccount\"\n                value={formik.values.toAccount}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.toAccount && Boolean(formik.errors.toAccount)\n                }\n              >\n                {accountList\n                  .filter(\n                    (account) =>\n                      ![formik.values.fromAccount, 0].includes(account.id)\n                  )\n                  .map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.name}\n                    </MenuItem>\n                  ))}\n              </Select>\n            </Grid>\n          </Grid>\n          <TextField\n            margin=\"dense\"\n            id=\"value\"\n            label=\"Value\"\n            fullWidth\n            value={formik.values.value}\n            onChange={formik.handleChange}\n            error={formik.touched.value && Boolean(formik.errors.value)}\n            helperText={formik.touched.value && formik.errors.value}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"note\"\n            label=\"Note\"\n            fullWidth\n            value={formik.values.note}\n            onChange={formik.handleChange}\n            error={formik.touched.note && Boolean(formik.errors.note)}\n            helperText={formik.touched.note && formik.errors.note}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              maxDate={new Date()}\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date\"\n              label=\"Date\"\n              fullWidth={true}\n              autoOk\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n              value={formik.values.date}\n              onChange={(value) => formik.setFieldValue(\"date\", value)}\n              error={formik.touched.date && Boolean(formik.errors.date)}\n              helperText={formik.touched.date && formik.errors.date}\n            />\n          </MuiPickersUtilsProvider>\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  tabName: {\n    color: theme.green,\n  },\n  infoBox: {\n    border: \"2px solid\",\n    borderRadius: 10,\n    padding: 15,\n    borderColor: theme.green,\n    backgroundColor: theme.white,\n  },\n}));\n\nconst goToAccounts = () => {};\n\nexport default function NoAccount() {\n  const classes = useStyles();\n\n  return (\n    <Box mt={2} className={classes.infoBox}>\n      <InfoIcon fontSize=\"large\" className={classes.tabName} />\n      <Typography variant=\"h6\">\n        Please add your first account in{\" \"}\n        <Link className={classes.tabName} onClick={goToAccounts()}>\n          Manage accounts\n        </Link>{\" \"}\n        tab\n      </Typography>\n    </Box>\n  );\n}\n","import { MenuItem, Select } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/styles\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst AccountPicker = styled(Select)({\n  maxHeight: 50,\n  minWidth: 162,\n  maxWidth: 162,\n  marginLeft: -20,\n  marginRight: 20,\n  backgroundColor: \"#fff\",\n});\n\nexport default function AccountSelect() {\n  const { accountList, selectedAccount, setSelectedById } = useAccountList();\n\n  const handleSelectedAccountChange = (event) => {\n    setSelectedById(event.target.value);\n  };\n\n  return (\n    <AccountPicker\n      variant=\"outlined\"\n      value={selectedAccount.id}\n      onChange={handleSelectedAccountChange}\n    >\n      {accountList.map((account) => (\n        <MenuItem key={account.id} value={account.id}>\n          {account.name}\n        </MenuItem>\n      ))}\n    </AccountPicker>\n  );\n}\n","import {\n  Box,\n  Container,\n  Grid,\n  IconButton,\n  Typography,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport DatePicker from \"../components/account/DatePicker\";\nimport RemoveCircleOutlineOutlinedIcon from \"@material-ui/icons/RemoveCircleOutlineOutlined\";\nimport LoopRoundedIcon from \"@material-ui/icons/LoopRounded\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport EventIcon from \"@material-ui/icons/Event\";\nimport AddCircleOutlineRoundedIcon from \"@material-ui/icons/AddCircleOutlineRounded\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport AddTransactionDialog from \"../components/account/AddTransactionDialog\";\nimport { useAccountList } from \"../providers/AccountListProvider\";\nimport TransactionList from \"../components/account/TransactionList\";\nimport { useTransactionList } from \"../providers/TransactionListProvider\";\nimport Loading from \"../components/core/Loading\";\nimport Balance from \"../components/account/Balance\";\nimport AddTransferDialog from \"../components/account/AddTransferDialog\";\nimport NoAccount from \"../components/account/NoAccount\";\nimport AccountSelect from \"../components/account/AccountSelect\";\n\nconst useStyles = makeStyles((theme) => ({\n  incomeButton: {\n    color: theme.green,\n  },\n  outcomeButton: {\n    color: theme.red,\n  },\n  sortButton: {\n    color: theme.black,\n    backgroundColor: theme.white,\n  },\n  accountPicker: {\n    maxHeight: 50,\n    minWidth: 162,\n    maxWidth: 162,\n    marginLeft: -20,\n    marginRight: 20,\n    backgroundColor: theme.white,\n  },\n}));\n\nexport default function Account() {\n  const [date, setDate] = useState(new Date());\n  const [periodOfTime, setPeriodOfTime] = useState(\"M\");\n  const [addTransactionOpen, setAddTransactionOpen] = useState(false);\n  const [addTransferOpen, setAddTransferOpen] = useState(false);\n  const [transactionType, setTransactionType] = useState(\"INCOME\");\n  const { accountList, selectedAccount } = useAccountList();\n  const { isTransactionLoading } = useTransactionList();\n  const [sortBy, setSortBy] = useState(\"category\");\n  const classes = useStyles();\n\n  const addTransaction = (transactionType) => {\n    setTransactionType(transactionType);\n    setAddTransactionOpen(true);\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      {!selectedAccount ? (\n        <Loading />\n      ) : (\n        <Box display=\"flex\">\n          <AccountSelect />\n          <Box>\n            <Grid container align=\"center\" direction=\"column\" spacing={2}>\n              <Grid item>\n                <DatePicker\n                  date={date}\n                  setDate={setDate}\n                  periodOfTime={periodOfTime}\n                  setPeriodOfTime={setPeriodOfTime}\n                />\n              </Grid>\n              {isTransactionLoading ? (\n                <Loading />\n              ) : accountList.length === 1 ? (\n                <NoAccount />\n              ) : (\n                <>\n                  <Grid item>\n                    <Balance date={date} periodOfTime={periodOfTime} />\n                  </Grid>\n                  <Grid item>\n                    <Box mt={1}>\n                      <IconButton\n                        className={classes.incomeButton}\n                        onClick={() => addTransaction(\"INCOME\")}\n                      >\n                        <AddCircleOutlineRoundedIcon fontSize=\"large\" />\n                      </IconButton>\n                      <IconButton\n                        color=\"inherit\"\n                        onClick={() => setAddTransferOpen(true)}\n                      >\n                        <LoopRoundedIcon fontSize=\"large\" />\n                      </IconButton>\n                      <IconButton\n                        className={classes.outcomeButton}\n                        onClick={() => addTransaction(\"OUTCOME\")}\n                      >\n                        <RemoveCircleOutlineOutlinedIcon fontSize=\"large\" />\n                      </IconButton>\n                    </Box>\n                  </Grid>\n                  <Grid item>\n                    <Box\n                      display=\"flex\"\n                      flexDirection=\"row\"\n                      justifyContent=\"flex-end\"\n                      alignItems=\"center\"\n                    >\n                      <Typography>Group by {sortBy}&nbsp;</Typography>\n                      <IconButton\n                        className={classes.sortButton}\n                        size=\"small\"\n                        onClick={() =>\n                          setSortBy(sortBy === \"date\" ? \"category\" : \"date\")\n                        }\n                      >\n                        {sortBy === \"date\" ? <FolderOpenIcon /> : <EventIcon />}\n                      </IconButton>\n                    </Box>\n                    <TransactionList\n                      sortBy={sortBy}\n                      date={date}\n                      periodOfTime={periodOfTime}\n                    />\n                  </Grid>{\" \"}\n                </>\n              )}\n            </Grid>\n          </Box>\n          <AddTransactionDialog\n            open={addTransactionOpen}\n            setOpen={setAddTransactionOpen}\n            transactionType={transactionType}\n          />\n          <AddTransferDialog\n            open={addTransferOpen}\n            setOpen={setAddTransferOpen}\n          />\n        </Box>\n      )}\n    </Container>\n  );\n}\n","import { Typography } from \"@material-ui/core\";\n\nexport default function PageTitle({ title }) {\n  return (\n    <Typography variant=\"h4\" align=\"center\">\n      {title}\n    </Typography>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useAuth } from \"../../providers/AuthProvider\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst validationSchema = yup.object({\n  name: yup.string(\"Enter account name\").required(\"Account name is required\"),\n  startBalance: yup\n    .number(\"Enter account start balance\")\n    .typeError(\"Start balance must be a number\")\n    .required(\"Start balance is required\"),\n});\n\nexport default function AddAcountDialog({ open, setOpen }) {\n  const { token } = useAuth();\n  const { setRefreshKey } = useAccountList();\n\n  const addAccount = async (values) => {\n    const { name, startBalance } = values;\n\n    const response = await axios({\n      method: \"post\",\n      url: \"api/account\",\n      data: {\n        name,\n        startBalance,\n        userId: token,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      startBalance: 0,\n    },\n    validationSchema: validationSchema,\n    onSubmit: addAccount,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Add account</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <DialogContentText>Enter account details</DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Account name\"\n            fullWidth\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"startBalance\"\n            label=\"Start balance\"\n            fullWidth\n            value={formik.values.startBalance}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.startBalance && Boolean(formik.errors.startBalance)\n            }\n            helperText={\n              formik.touched.startBalance && formik.errors.startBalance\n            }\n          />\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport axios from \"../../axios-instance\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\n\nconst validationSchema = yup.object({\n  name: yup.string(\"Enter account name\").required(\"Account name is required\"),\n  startBalance: yup\n    .number(\"Enter account start balance\")\n    .typeError(\"Start balance must be a number\")\n    .required(\"Start balance is required\"),\n});\n\nexport default function ModifyAccountDialog({ open, setOpen, account }) {\n  const { setRefreshKey } = useAccountList();\n  const modifyAccount = async (values) => {\n    const { name, startBalance } = values;\n\n    const response = await axios({\n      method: \"put\",\n      url: `api/account/${account.id}`,\n      data: {\n        name,\n        startBalance,\n      },\n    });\n    if (response.status === 200) {\n      setOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: account ? account : { name: \"\", startBalance: \"\" },\n    validationSchema: validationSchema,\n    onSubmit: modifyAccount,\n  });\n\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Modify account</DialogTitle>\n      <DialogContent>\n        <form onSubmit={formik.handleSubmit}>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Account name\"\n            fullWidth\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"startBalance\"\n            label=\"Start balance balance\"\n            fullWidth\n            value={formik.values.startBalance}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.startBalance && Boolean(formik.errors.startBalance)\n            }\n            helperText={\n              formik.touched.startBalance && formik.errors.startBalance\n            }\n          />\n          <DialogActions>\n            <Button\n              onClick={() => setOpen(false)}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@material-ui/core\";\n\nexport default function ConfirmDialog({ open, setOpen, handleAction }) {\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogTitle>Are you sure you want to delete this item?</DialogTitle>\n      <DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button color=\"primary\" onClick={handleAction}>\n            Delete\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Avatar,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport ModifyAccountDialog from \"./ModifyAccountDialog\";\nimport { useState } from \"react\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\nimport axios from \"../../axios-instance\";\nimport ConfirmDialog from \"../core/ConfirmDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  accountAvatar: {\n    backgroundColor: theme.green,\n  },\n  accountItem: {\n    backgroundColor: theme.white,\n    borderRadius: 20,\n    marginBottom: 5,\n  },\n}));\n\nexport default function AccountItem({ account }) {\n  const [isModifyDialogOpen, setIsModifyDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const { setRefreshKey } = useAccountList();\n  const classes = useStyles();\n\n  const deleteAccount = async (id) => {\n    const response = await axios({\n      method: \"delete\",\n      url: `api/account/${id}`,\n    });\n    if (response.status === 200) {\n      setIsDeleteDialogOpen(false);\n      setRefreshKey((oldKey) => oldKey + 1);\n    }\n  };\n\n  return (\n    <>\n      <ListItem key={account.id} className={classes.accountItem}>\n        <ListItemAvatar>\n          <Avatar className={classes.accountAvatar} variant=\"rounded\">\n            <AccountBalanceWalletIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText\n          primary={account.name}\n          secondary={`Start balance: ${account.startBalance}`}\n        />\n        <ListItemSecondaryAction>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"edit\"\n            onClick={() => setIsModifyDialogOpen(true)}\n          >\n            <SettingsIcon />\n          </IconButton>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            onClick={() => setIsDeleteDialogOpen(true)}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n      <ModifyAccountDialog\n        open={isModifyDialogOpen}\n        setOpen={setIsModifyDialogOpen}\n        account={account}\n      />\n      <ConfirmDialog\n        open={isDeleteDialogOpen}\n        setOpen={setIsDeleteDialogOpen}\n        handleAction={() => deleteAccount(account.id)}\n      />\n    </>\n  );\n}\n","import { List } from \"@material-ui/core\";\nimport { useAccountList } from \"../../providers/AccountListProvider\";\nimport AccountItem from \"./AccountItem\";\n\nexport default function AccountList() {\n  const { accountList } = useAccountList();\n\n  return (\n    <List>\n      {accountList\n        .filter((account) => account.id !== 0)\n        .map((account) => (\n          <AccountItem key={account.id} account={account} />\n        ))}\n    </List>\n  );\n}\n","import { Button, Container, Grid } from \"@material-ui/core\";\nimport PageTitle from \"../components/core/PageTitle\";\nimport { useState } from \"react\";\nimport AddAccountDialog from \"../components/manageAccount/AddAccountDialog\";\nimport AccountList from \"../components/manageAccount/AccountList\";\nimport { useAccountList } from \"../providers/AccountListProvider\";\nimport Loading from \"../components/core/Loading\";\n\nexport default function ManageAccount() {\n  const { isAccountLoading } = useAccountList();\n  const [addAccountOpen, setAddAccountOpen] = useState(false);\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Grid container align=\"center\" direction=\"column\" spacing={3}>\n        <Grid item>\n          <PageTitle title=\"Manage accounts\" />\n        </Grid>\n        <Grid item>{isAccountLoading ? <Loading /> : <AccountList />}</Grid>\n        <Grid item>\n          <Button\n            size=\"large\"\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => setAddAccountOpen(true)}\n          >\n            Add account\n          </Button>\n        </Grid>\n      </Grid>\n      <AddAccountDialog open={addAccountOpen} setOpen={setAddAccountOpen} />\n    </Container>\n  );\n}\n","import { Box, Container, Grid } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport AccountSelect from \"../components/account/AccountSelect\";\nimport DatePicker from \"../components/account/DatePicker\";\nimport Loading from \"../components/core/Loading\";\nimport { useAccountList } from \"../providers/AccountListProvider\";\n\nexport default function AccountStats() {\n  const [date, setDate] = useState(new Date());\n  const [periodOfTime, setPeriodOfTime] = useState(\"M\");\n  const { selectedAccount } = useAccountList();\n\n  return (\n    <Container maxWidth=\"md\">\n      {!selectedAccount ? (\n        <Loading />\n      ) : (\n        <Box display=\"flex\">\n          <AccountSelect />\n          <Box>\n            <Grid container align=\"center\" direction=\"column\" spacing={2}>\n              <Grid item>\n                <DatePicker\n                  date={date}\n                  setDate={setDate}\n                  periodOfTime={periodOfTime}\n                  setPeriodOfTime={setPeriodOfTime}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      )}\n    </Container>\n  );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useState } from \"react\";\r\nimport HeadLayout from \"../components/core/layout/HeadLayout\";\r\nimport Account from \"./Account\";\r\nimport ManageAccount from \"./ManageAccount\";\r\nimport LocalAtmIcon from \"@material-ui/icons/LocalAtm\";\r\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\r\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\r\nimport AccountListProvider from \"../providers/AccountListProvider\";\r\nimport TransactionListProvider from \"../providers/TransactionListProvider\";\r\nimport AccountStats from \"./AccountStats\";\r\n\r\nconst pages = {\r\n  account: {\r\n    body: <Account />,\r\n    icon: <LocalAtmIcon />,\r\n    title: \"Account page\",\r\n  },\r\n  manageAccount: {\r\n    body: <ManageAccount />,\r\n    icon: <AccountBalanceWalletIcon />,\r\n    title: \"Manage accounts\",\r\n  },\r\n  accountStats: {\r\n    body: <AccountStats />,\r\n    icon: <AssessmentIcon />,\r\n    title: \"Account stats\",\r\n  },\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    marginTop: 60,\r\n  },\r\n}));\r\n\r\nexport default function Landing() {\r\n  const [activePage, setActivePage] = useState(\"account\");\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <HeadLayout\r\n        navItems={pages}\r\n        currentNavItem={activePage}\r\n        setCurrentNavItem={setActivePage}\r\n      />\r\n      <AccountListProvider>\r\n        <TransactionListProvider>\r\n          <main className={classes.content}>{pages[activePage].body}</main>\r\n        </TransactionListProvider>\r\n      </AccountListProvider>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport { useAuth } from \"./providers/AuthProvider\";\nimport Landing from \"./pages/Landing\";\nimport {\n  createMuiTheme,\n  CssBaseline,\n  MuiThemeProvider,\n} from \"@material-ui/core\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#85bb65\",\n    },\n    secondary: {\n      main: \"#cdb68e\",\n    },\n    background: {\n      default: \"#fafafa\",\n    },\n  },\n  white: \"#fff\",\n  black: \"#000\",\n  green: green[500],\n  red: red[500],\n});\n\nfunction App() {\n  const { token } = useAuth();\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Switch>\n        {token ? (\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        ) : (\n          <>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n            <Route path=\"/register\">\n              <Register />\n            </Route>\n            <Route strict exact path=\"/\">\n              <Redirect to=\"/login\" />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { AuthProvider } from \"./providers/AuthProvider\";\n\nReactDOM.render(\n  <Router>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}